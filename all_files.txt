

// .gitignore

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts




// components.json

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

// eslint.config.mjs

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


// next-env.d.ts

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


// next.config.ts

import { NextConfig } from 'next';

const nextConfig: NextConfig = {

};

export default nextConfig;

// package.json

{
  "name": "fahrzeug3",
  "type": "module",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@auth/prisma-adapter": "^2.8.0",
    "@hookform/resolvers": "^4.1.3",
    "@prisma/client": "^6.4.1",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-aspect-ratio": "^1.1.2",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.3",
    "@radix-ui/react-context-menu": "^2.2.6",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-hover-card": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-navigation-menu": "^1.2.5",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-toggle": "^1.1.2",
    "@radix-ui/react-toggle-group": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@tanstack/react-query": "^5.67.1",
    "bcrypt": "^5.1.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.5.2",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.477.0",
    "next": "15.2.1",
    "next-auth": "^4.24.11",
    "next-themes": "^0.4.4",
    "prisma": "^6.4.1",
    "react": "^19.0.0",
    "react-day-picker": "^9.5.1",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "react-resizable-panels": "^2.1.7",
    "react-router-dom": "^7.2.0",
    "recharts": "^2.15.1",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.2",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.0.12",
    "@types/bcrypt": "^5.0.2",
    "@types/node": "^20.17.23",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.1",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.0.12",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.2"
  },
  "overrides": {
    "react-is": "^19.0.0-rc-69d4b800-20241021"
  }
}


// postcss.config.mjs

/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};

export default config;

// README.md

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

```
fahrzeug3
├─ app
│  ├─ api
│  │  └─ auth
│  │     └─ [...nextauth]
│  │        └─ route.ts
│  ├─ ClientIndex.tsx
│  ├─ ClientWrapper.tsx
│  ├─ favicon.ico
│  ├─ globals.css
│  ├─ katalog
│  │  ├─ page.tsx
│  │  └─ [id]
│  │     └─ page.tsx
│  ├─ konfigurator
│  │  ├─ page.tsx
│  │  └─ [id]
│  │     └─ page.tsx
│  ├─ layout.tsx
│  ├─ login
│  │  └─ page.tsx
│  ├─ not-found.tsx
│  ├─ page.tsx
│  ├─ registrieren
│  │  └─ page.tsx
│  └─ verwaltung
│     └─ page.tsx
├─ components
│  ├─ auth-provider.tsx
│  ├─ FahrzeugCard.tsx
│  ├─ KonfigurationsUebersicht.tsx
│  ├─ konfigurator
│  │  ├─ AusstattungTab.tsx
│  │  ├─ FahrzeugTab.tsx
│  │  ├─ FarbeTab.tsx
│  │  ├─ FelgenTab.tsx
│  │  ├─ KonfiguratorTabs.tsx
│  │  ├─ MotorTab.tsx
│  │  ├─ NavigationButtons.tsx
│  │  └─ ZusammenfassungTab.tsx
│  ├─ Layout.tsx
│  ├─ login-form.tsx
│  ├─ Navigation.tsx
│  ├─ register-form.tsx
│  ├─ ui
│  │  ├─ accordion.tsx
│  │  ├─ alert-dialog.tsx
│  │  ├─ alert.tsx
│  │  ├─ aspect-ratio.tsx
│  │  ├─ avatar.tsx
│  │  ├─ badge.tsx
│  │  ├─ breadcrumb.tsx
│  │  ├─ button.tsx
│  │  ├─ calendar.tsx
│  │  ├─ card.tsx
│  │  ├─ carousel.tsx
│  │  ├─ chart.tsx
│  │  ├─ checkbox.tsx
│  │  ├─ collapsible.tsx
│  │  ├─ command.tsx
│  │  ├─ context-menu.tsx
│  │  ├─ dialog.tsx
│  │  ├─ drawer.tsx
│  │  ├─ dropdown-menu.tsx
│  │  ├─ form.tsx
│  │  ├─ hover-card.tsx
│  │  ├─ input-otp.tsx
│  │  ├─ input.tsx
│  │  ├─ label.tsx
│  │  ├─ menubar.tsx
│  │  ├─ navigation-menu.tsx
│  │  ├─ pagination.tsx
│  │  ├─ popover.tsx
│  │  ├─ progress.tsx
│  │  ├─ radio-group.tsx
│  │  ├─ resizable.tsx
│  │  ├─ scroll-area.tsx
│  │  ├─ select.tsx
│  │  ├─ separator.tsx
│  │  ├─ sheet.tsx
│  │  ├─ sidebar.tsx
│  │  ├─ skeleton.tsx
│  │  ├─ slider.tsx
│  │  ├─ sonner.tsx
│  │  ├─ switch.tsx
│  │  ├─ table.tsx
│  │  ├─ tabs.tsx
│  │  ├─ textarea.tsx
│  │  ├─ toast.tsx
│  │  ├─ toaster.tsx
│  │  ├─ toggle-group.tsx
│  │  ├─ toggle.tsx
│  │  ├─ tooltip.tsx
│  │  └─ use-toast.ts
│  └─ verwaltung
│     ├─ BestellungsList.tsx
│     └─ KonfigurationsList.tsx
├─ components.json
├─ context
│  ├─ AppContext.tsx
│  ├─ types.ts
│  ├─ useKonfiguration.ts
│  ├─ useToast.ts
│  └─ utils.ts
├─ data
│  └─ mockData.ts
├─ eslint.config.mjs
├─ hooks
│  ├─ use-mobile.tsx
│  └─ use-toast.ts
├─ lib
│  ├─ auth.ts
│  ├─ prisma.ts
│  └─ utils.ts
├─ next.config.ts
├─ package-lock.json
├─ package.json
├─ postcss.config.mjs
├─ prisma
│  └─ schema.prisma
├─ public
│  ├─ file.svg
│  ├─ globe.svg
│  ├─ next.svg
│  ├─ vercel.svg
│  └─ window.svg
├─ README.md
├─ tailwind.config.ts
├─ tsconfig.json
└─ types
   └─ models.ts

```

// structure.txt

.env
.gitignore
README.md
all_files.txt
collect.py
components.json
eslint.config.mjs
next-env.d.ts
next.config.ts
package-lock.json
package.json
postcss.config.mjs
structure.txt
tailwind.config.ts
tsconfig.json
│       
├───app
│   ClientIndex.tsx
│   ClientWrapper.tsx
│   favicon.ico
│   globals.css
│   layout.tsx
│   not-found.tsx
│   page.tsx
│       
│   ├───admin
│       
│   │   ├───bestellverwaltung
│   │   │   page.tsx
│       
│   │   ├───kunden
│   │   │   page.tsx
│       
│   ├───api
│       
│   │   ├───admin
│       
│   │   │   ├───bestellungen
│   │   │   │   route.ts
│       
│   │   │   │   ├───delete
│   │   │   │   │   route.ts
│       
│   │   │   ├───fahrzeuge
│       
│   │   │   │   ├───create
│   │   │   │   │   route.ts
│       
│   │   │   │   ├───delete
│   │   │   │   │   route.ts
│       
│   │   │   │   ├───update
│   │   │   │   │   route.ts
│       
│   │   │   │   ├───upload
│       
│   │   │   │   │   ├───[id]
│   │   │   │   │   │   route.ts
│       
│   │   │   ├───fahrzeugkategorien
│   │   │   │   route.ts
│       
│   │   │   ├───kunden
│   │   │   │   route.ts
│       
│   │   │   │   ├───[id]
│   │   │   │   │   route.ts
│       
│   │   ├───auth
│       
│   │   │   ├───[...nextauth]
│   │   │   │   route.ts
│       
│   │   ├───bestellungen
│   │   │   route.ts
│       
│   │   │   ├───create
│   │   │   │   route.ts
│       
│   │   │   ├───update
│       
│   │   │   │   ├───[id]
│   │   │   │   │   route.ts
│       
│   │   ├───konfigurator
│       
│   │   │   ├───data
│   │   │   │   route.ts
│       
│   │   │   ├───delete
│       
│   │   │   │   ├───[id]
│   │   │   │   │   route.ts
│       
│   │   │   ├───save
│   │   │   │   route.ts
│       
│   │   ├───profil
│   │   │   route.ts
│       
│   │   │   ├───address
│   │   │   │   route.ts
│       
│   │   │   ├───password
│   │   │   │   route.ts
│       
│   │   ├───register
│   │   │   route.ts
│       
│   │   ├───verwaltung
│   │   │   route.ts
│       
│   ├───katalog
│   │   page.tsx
│       
│   │   ├───[id]
│   │   │   page.tsx
│       
│   ├───konfigurator
│   │   page.tsx
│       
│   │   ├───[id]
│   │   │   page.tsx
│       
│   ├───login
│   │   page.tsx
│       
│   ├───profil
│   │   page.tsx
│       
│   ├───registrieren
│   │   page.tsx
│       
│   ├───verwaltung
│   │   page.tsx
│       
├───components
│   FahrzeugCard.tsx
│   KonfigurationsUebersicht.tsx
│   Layout.tsx
│   Navigation.tsx
│   login-form.tsx
│   profile-form.tsx
│   register-form.tsx
│       
│   ├───admin
│   │   Bestellverwaltung.tsx
│   │   Kundenverwaltung.tsx
│       
│   ├───konfigurator
│   │   AusstattungTab.tsx
│   │   FahrzeugTab.tsx
│   │   FarbeTab.tsx
│   │   FelgenTab.tsx
│   │   KonfiguratorTabs.tsx
│   │   MotorTab.tsx
│   │   NavigationButtons.tsx
│   │   ZusammenfassungTab.tsx
│       
│   ├───ui
│   │   accordion.tsx
│   │   alert-dialog.tsx
│   │   alert.tsx
│   │   aspect-ratio.tsx
│   │   avatar.tsx
│   │   badge.tsx
│   │   breadcrumb.tsx
│   │   button.tsx
│   │   calendar.tsx
│   │   card.tsx
│   │   carousel.tsx
│   │   chart.tsx
│   │   checkbox.tsx
│   │   collapsible.tsx
│   │   command.tsx
│   │   context-menu.tsx
│   │   dialog.tsx
│   │   drawer.tsx
│   │   dropdown-menu.tsx
│   │   form.tsx
│   │   hover-card.tsx
│   │   input-otp.tsx
│   │   input.tsx
│   │   label.tsx
│   │   menubar.tsx
│   │   navigation-menu.tsx
│   │   pagination.tsx
│   │   popover.tsx
│   │   progress.tsx
│   │   radio-group.tsx
│   │   resizable.tsx
│   │   scroll-area.tsx
│   │   select.tsx
│   │   separator.tsx
│   │   sheet.tsx
│   │   sidebar.tsx
│   │   skeleton.tsx
│   │   slider.tsx
│   │   sonner.tsx
│   │   switch.tsx
│   │   table.tsx
│   │   tabs.tsx
│   │   textarea.tsx
│   │   toast.tsx
│   │   toaster.tsx
│   │   toggle-group.tsx
│   │   toggle.tsx
│   │   tooltip.tsx
│   │   use-toast.ts
│       
│   ├───verwaltung
│   │   BestellungsList.tsx
│   │   KonfigurationsList.tsx
│       
├───context
│   AppContext.tsx
│   ToastContext.tsx
│   utils.ts
│       
├───hooks
│   use-mobile.tsx
│   use-toast.ts
│       
├───lib
│   auth.ts
│   prisma.ts
│   utils.ts
│       
├───prisma
│   schema.prisma
│       
│   ├───migrations
│   │   migration_lock.toml
│       
│   │   ├───20250309212839_make_address_fields_required
│   │   │   migration.sql
│       
├───public
│   file.svg
│   globe.svg
│   next.svg
│   vercel.svg
│   window.svg
│       
│   ├───uploads
│   │   1741641620498-mercedes-benz-c-class-w206-06-2022.jpg
│   │   1741645584805-898.jpg
│   │   1741648120538-k7m-2021-new.png
│   │   1741680141457-k7m-2021-new.png
│   │   1741680474282-mercedes-benz-c-class-w206-06-2022.jpg
│       
├───types
│   models.ts
│   next-auth.d.ts


// tailwind.config.ts

import type { Config } from "tailwindcss";

export default {
  darkMode: "class",
  content: [
   "./app/**/*.{ts,tsx}",
      "./components/**/*.{ts,tsx}",
      "./lib/**/*.{ts,tsx}",
      "./hooks/**/*.{ts,tsx}"
  ],
  prefix: "",
  theme: {
    extend: {
      fontFamily: {
        sans: ["Inter", "sans-serif"],
        display: ["SF Pro Display", "Inter", "sans-serif"],
      },
      colors: {
        "status-fertig": "hsl(var(--chart-5))", 
        "status-ausgeliefert": "hsl(var(--chart-4))",
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: "hsl(var(--primary))",
        "primary-foreground": "hsl(var(--primary-foreground))",
        secondary: "hsl(var(--secondary))",
        "secondary-foreground": "hsl(var(--secondary-foreground))",
        destructive: "hsl(var(--destructive))",
        "destructive-foreground": "hsl(var(--destructive-foreground))",
        muted: "hsl(var(--muted))",
        "muted-foreground": "hsl(var(--muted-foreground))",
        accent: "hsl(var(--accent))",
        "accent-foreground": "hsl(var(--accent-foreground))",
        popover: "hsl(var(--popover))",
        "popover-foreground": "hsl(var(--popover-foreground))",
        card: "hsl(var(--card))",
        "card-foreground": "hsl(var(--card-foreground))",
        "sidebar-background": "hsl(var(--sidebar-background))",
        "sidebar-foreground": "hsl(var(--sidebar-foreground))",
        "sidebar-primary": "hsl(var(--sidebar-primary))",
        "sidebar-primary-foreground": "hsl(var(--sidebar-primary-foreground))",
        "sidebar-accent": "hsl(var(--sidebar-accent))",
        "sidebar-accent-foreground": "hsl(var(--sidebar-accent-foreground))",
        "sidebar-border": "hsl(var(--sidebar-border))",
        "sidebar-ring": "hsl(var(--sidebar-ring))",
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "fade-in": {
          "0%": { opacity: "0", transform: "translateY(10px)" },
          "100%": { opacity: "1", transform: "translateY(0)" },
        },
        "fade-out": {
          "0%": { opacity: "1", transform: "translateY(0)" },
          "100%": { opacity: "0", transform: "translateY(10px)" },
        },
        "scale-in": {
          "0%": { transform: "scale(0.95)", opacity: "0" },
          "100%": { transform: "scale(1)", opacity: "1" },
        },
        "scale-out": {
          from: { transform: "scale(1)", opacity: "1" },
          to: { transform: "scale(0.95)", opacity: "0" },
        },
        "slide-in-right": {
          "0%": { transform: "translateX(100%)" },
          "100%": { transform: "translateX(0)" },
        },
        "slide-out-right": {
          "0%": { transform: "translateX(0)" },
          "100%": { transform: "translateX(100%)" },
        },
        float: {
          "0%, 100%": { transform: "translateY(0)" },
          "50%": { transform: "translateY(-5px)" },
        },
        "pulse-subtle": {
          "0%, 100%": { opacity: "1" },
          "50%": { opacity: "0.8" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in": "fade-in 0.3s ease-out",
        "fade-out": "fade-out 0.3s ease-out",
        "scale-in": "scale-in 0.2s ease-out",
        "scale-out": "scale-out 0.2s ease-out",
        "slide-in-right": "slide-in-right 0.3s ease-out",
        "slide-out-right": "slide-out-right 0.3s ease-out",
        enter: "fade-in 0.3s ease-out, scale-in 0.2s ease-out",
        exit: "fade-out 0.3s ease-out, scale-out 0.2s ease-out",
        float: "float 3s ease-in-out infinite",
        "pulse-subtle": "pulse-subtle 3s ease-in-out infinite",
      },
    },
  },
  plugins: [],
} satisfies Config;

// tsconfig.json

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "types": ["node","next-auth"],
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "types/**/*.ts"],
  "exclude": ["node_modules"]
}


// app/ClientIndex.tsx

"use client";

import React from "react";
import Link from "next/link";
import FahrzeugCard from "@/components/FahrzeugCard";
import { useAppContext } from "@/context/AppContext";
import { Button } from "@/components/ui/button";
import { ChevronRight, Car, Settings, ShoppingCart } from "lucide-react";

export default function ClientIndex() {
  const { fahrzeuge } = useAppContext();
  const featuredFahrzeuge = fahrzeuge.slice(0, 3);

  return (
    <>
      <section className="py-16 bg-primary text-white md:py-32">
        <div className="container mx-auto px-4">
          <div className="max-w-3xl">
            <h1 className="text-4xl md:text-5xl font-bold mb-4">
              Ihr Traumfahrzeug ist nur wenige Klicks entfernt
            </h1>
            <p className="text-xl mb-8 text-gray-300">
              Entdecken, konfigurieren und bestellen Sie Ihr Wunschfahrzeug mit
              unserem innovativen Konfigurator.
            </p>
            <div className="flex flex-col sm:flex-row gap-4">
              <Link href="/katalog">
                <Button
                  size="lg"
                  variant="outline"
                  className="border border-primary-foreground bg-primary hover:bg-secondary-foreground/90 hover:text-secondary"
                >
                  Fahrzeuge entdecken
                  <ChevronRight className="ml-1 h-4 w-4" />
                </Button>
              </Link>
              <Link href="/konfigurator">
                <Button
                  size="lg"
                  variant="outline"
                  className="text-primary border-white hover:bg-secondary-foreground hover:text-secondary"
                >
                  Direkt konfigurieren
                </Button>
              </Link>
            </div>
          </div>
        </div>
        <div className="absolute bottom-0 right-0 w-full h-16 bg-gradient-to-t from-white to-transparent"></div>
      </section>

      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">
            Entdecken Sie unsere Serviceleistungen
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="flex flex-col items-center text-center p-6 rounded-lg hover:shadow-md transition-shadow">
              <div className="w-16 h-16 bg-primary/10 text-primary rounded-full flex items-center justify-center mb-4">
                <Car size={32} />
              </div>
              <h3 className="text-xl font-semibold mb-2">
                Umfangreicher Fahrzeugkatalog
              </h3>
              <p className="text-gray-600">
                Durchstöbern Sie unser exklusives Angebot an Premium-Fahrzeugen
                mit detaillierten Informationen.
              </p>
            </div>
            <div className="flex flex-col items-center text-center p-6 rounded-lg hover:shadow-md transition-shadow">
              <div className="w-16 h-16 bg-primary/10 text-primary rounded-full flex items-center justify-center mb-4">
                <Settings size={32} />
              </div>
              <h3 className="text-xl font-semibold mb-2">
                Individueller Konfigurator
              </h3>
              <p className="text-gray-600">
                Gestalten Sie Ihr Traumauto mit unserem intuitiven Konfigurator
                nach Ihren persönlichen Vorstellungen.
              </p>
            </div>
            <div className="flex flex-col items-center text-center p-6 rounded-lg hover:shadow-md transition-shadow">
              <div className="w-16 h-16 bg-primary/10 text-primary rounded-full flex items-center justify-center mb-4">
                <ShoppingCart size={32} />
              </div>
              <h3 className="text-xl font-semibold mb-2">
                Einfache Kaufabwicklung
              </h3>
              <p className="text-gray-600">
                Verwalten Sie Ihre Konfigurationen, Bestellungen und Termine in
                unserem Kundencenter.
              </p>
            </div>
          </div>
        </div>
      </section>

      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center mb-8">
            <h2 className="text-3xl font-bold">Unsere Top-Modelle</h2>
            <Link href="/katalog" className="text-primary hover:text-primary/80 flex items-center">
              Alle Fahrzeuge ansehen
              <ChevronRight className="ml-1 h-4 w-4" />
            </Link>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {featuredFahrzeuge.map((fahrzeug) => (
              <FahrzeugCard key={fahrzeug.id} fahrzeug={fahrzeug} />
            ))}
          </div>
        </div>
      </section>

      <section className="py-16 bg-primary text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Bereit für Ihr Traumauto?</h2>
          <p className="text-xl mb-8 max-w-2xl mx-auto">
            Starten Sie jetzt mit der Konfiguration Ihres Wunschfahrzeugs und
            erleben Sie die Fahrzeugauswahl der nächsten Generation.
          </p>
          <Link href="/konfigurator">
            <Button
              size="lg"
              variant="outline"
              className="text-primary border-white hover:bg-white/10 hover:text-secondary"
            >
              Jetzt konfigurieren
            </Button>
          </Link>
        </div>
      </section>
    </>
  );
}

// app/ClientWrapper.tsx

"use client";

import { Toaster } from "sonner";
import { SessionProvider } from "next-auth/react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { TooltipProvider } from "@/components/ui/tooltip";
import { AppProvider } from "@/context/AppContext";
import { ToastProvider } from "@/context/ToastContext"; // Новый импорт

const queryClient = new QueryClient();

export default function ClientWrapper({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <SessionProvider>
      <QueryClientProvider client={queryClient}>
        <ToastProvider>
          <AppProvider>
            <TooltipProvider>
              <Toaster richColors position="bottom-right" />
              {children}
            </TooltipProvider>
          </AppProvider>
        </ToastProvider>
      </QueryClientProvider>
    </SessionProvider>
  );
}

// app/favicon.ico

// app/favicon.ico [Ошибка чтения: 'utf-8' codec can't decode byte 0x96 in position 50: invalid start byte]

// app/globals.css

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

@custom-variant dark (&:is(.dark *));

@plugin 'tailwindcss-animate';

@import "tailwindcss";

@layer base {
  * {
    border-color: hsl(var(--border));
  }

  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    @apply antialiased;
  }
}

@layer utilities {
  .card-hover {
    @apply transition-all duration-300;
  }

  .card-hover:hover {
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    transform: translateY(-0.25rem);
  }

  .nav-link {
    @apply relative inline-block;
    transition-property: color;
    transition-duration: 300ms;
    transition-timing-function: ease-in-out;
  }

  .nav-link:hover {
    color: hsl(var(--primary));
  }

  .glassmorphism {
    background-color: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(6px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  }

  .section-title {
    font-size: 1.5rem;
    line-height: 2rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    position: relative;
  }

  @media (min-width: 768px) {
    .section-title {
      font-size: 1.875rem;
      line-height: 2.25rem;
    }
  }

  .section-title::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -0.5rem;
    width: 4rem;
    height: 0.25rem;
    background-color: hsl(var(--primary));
    border-radius: 9999px;
  }

  .content-container {
    max-width: 80rem;
    margin-left: auto;
    margin-right: auto;
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 2rem;
    padding-bottom: 2rem;
  }

  @media (min-width: 1400px) {
    .container {
      max-width: 1400px;
    }

    .input-with-icon {
      padding-left: 2.5rem;
      position: relative;
    }
  }

  @media (min-width: 640px) {
    .content-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }

  .page-transition-enter {
    opacity: 0;
    transform: translateY(20px);
  }

  .page-transition-enter-active {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 300ms, transform 300ms;
  }

  .page-transition-exit {
    opacity: 1;
    transform: translateY(0);
  }

  .page-transition-exit-active {
    opacity: 0;
    transform: translateY(-20px);
    transition: opacity 300ms, transform 300ms;
  }
}

:root {
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.129 0.042 264.695);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.129 0.042 264.695);
  --primary: oklch(0.25 0.12 262);
  --primary-foreground: oklch(0.98 0.003 247.858);
  --secondary: oklch(0.968 0.007 247.896);
  --secondary-foreground: oklch(0.208 0.042 265.755);
  --muted: oklch(0.968 0.007 247.896);
  --muted-foreground: oklch(0.554 0.046 257.417);
  --accent: oklch(0.968 0.007 247.896);
  --accent-foreground: oklch(0.208 0.042 265.755);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.929 0.013 255.508);
  --input: oklch(0.929 0.013 255.508);
  --ring: oklch(0.704 0.04 256.788);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.984 0.003 247.858);
  --sidebar-foreground: oklch(0.129 0.042 264.695);
  --sidebar-primary: oklch(0.208 0.042 265.755);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.968 0.007 247.896);
  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
  --sidebar-border: oklch(0.929 0.013 255.508);
  --sidebar-ring: oklch(0.704 0.04 256.788);
  --background: oklch(1 0 0);
  --foreground: oklch(0.129 0.042 264.695);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }

  body {
    @apply bg-background text-foreground;
  }
}

.dark {
  --background: oklch(0.129 0.042 264.695);
  --foreground: oklch(0.984 0.003 247.858);
  --card: oklch(0.129 0.042 264.695);
  --card-foreground: oklch(0.984 0.003 247.858);
  --popover: oklch(0.129 0.042 264.695);
  --popover-foreground: oklch(0.984 0.003 247.858);
  --primary: oklch(0.984 0.003 247.858);
  --primary-foreground: oklch(0.208 0.042 265.755);
  --secondary: oklch(0.279 0.041 260.031);
  --secondary-foreground: oklch(0.984 0.003 247.858);
  --muted: oklch(0.279 0.041 260.031);
  --muted-foreground: oklch(0.704 0.04 256.788);
  --accent: oklch(0.279 0.041 260.031);
  --accent-foreground: oklch(0.984 0.003 247.858);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.279 0.041 260.031);
  --input: oklch(0.279 0.041 260.031);
  --ring: oklch(0.446 0.043 257.281);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.208 0.042 265.755);
  --sidebar-foreground: oklch(0.984 0.003 247.858);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.279 0.041 260.031);
  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
  --sidebar-border: oklch(0.279 0.041 260.031);
  --sidebar-ring: oklch(0.446 0.043 257.281);
}

// app/layout.tsx

import { ReactNode } from 'react';
import ClientWrapper from './ClientWrapper';

import "@/app/globals.css";

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="de">
      <body>
        <ClientWrapper>{children}</ClientWrapper>
      </body>
    </html>
  );
}

// app/not-found.tsx

"use client";

import { useEffect } from "react";
import { usePathname } from "next/navigation";
import Link from "next/link";

export default function NotFound() {
  const pathname = usePathname();

  useEffect(() => {
    console.error("404 Error: User attempted to access non-existent route:", pathname);
  }, [pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <Link href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </Link>
      </div>
    </div>
  );
}

// app/page.tsx

import React from "react";
import Layout from "@/components/Layout";
import ClientIndex from "./ClientIndex"; 
import { AppProvider } from "@/context/AppContext"; 

export default function Home() {
  return (
    <Layout>
      <AppProvider>
        <ClientIndex />
      </AppProvider>
    </Layout>
  );
}

// app/admin/bestellverwaltung/page.tsx

// app/admin/bestellverwaltung/page.tsx
import Bestellverwaltung from "@/components/admin/Bestellverwaltung";
import Layout from "@/components/Layout";

export default function BestellverwaltungPage() {
  return <Layout>
  <Bestellverwaltung />
  </Layout>;
}

// app/admin/kunden/page.tsx

// app/admin/kunden/page.tsx
import Kundenverwaltung from "@/components/admin/Kundenverwaltung";
import Layout from "@/components/Layout";

export default function KundenverwaltungPage() {
  return <Layout><Kundenverwaltung /></Layout> ;
}

// app/api/admin/bestellungen/route.ts

// app/api/admin/bestellungen/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function GET() {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  try {
    const bestellungen = await prisma.bestellung.findMany({
      include: {
        konfiguration: {
          include: { fahrzeug: true },
        },
        user: true,
      },
    });

    const formattedBestellungen = bestellungen.map((bestellung) => ({
      id: bestellung.id,
      konfigurationId: bestellung.konfigurationId,
      fahrzeugName: `${bestellung.konfiguration.fahrzeug.marke} ${bestellung.konfiguration.fahrzeug.modell}`,
      gesamtPreis: bestellung.konfiguration.gesamtpreis,
      bestellDatum: bestellung.bestellDatum,
      lieferDatum: bestellung.lieferDatum,
      status: bestellung.status,
      userName:
        bestellung.user.lastName && bestellung.user.firstName
          ? `${bestellung.user.firstName} ${bestellung.user.lastName}`
          : bestellung.user.email,
    }));

    return NextResponse.json({ bestellungen: formattedBestellungen });
  } catch (error) {
    return NextResponse.json(
      { error: "Fehler beim Laden der Bestellungen" },
      { status: 500 }
    );
  }
}


// app/api/admin/bestellungen/delete/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function DELETE(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  try {
    const { id } = await req.json(); // Erwartet die Bestellungs-ID im Body
    if (!id) {
      return NextResponse.json({ error: "Bestellungs-ID fehlt" }, { status: 400 });
    }

    const deletedBestellung = await prisma.bestellung.delete({
      where: { id },
    });

    return NextResponse.json({ message: "Bestellung erfolgreich gelöscht", deletedBestellung });
  } catch (error) {
    console.error("Fehler beim Löschen der Bestellung:", error);
    return NextResponse.json(
      { error: "Fehler beim Löschen der Bestellung" },
      { status: 500 }
    );
  }
}

// app/api/admin/fahrzeuge/create/route.ts

// app/api/admin/fahrzeuge/create/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function POST(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  try {
    const data = await req.json();
    console.log("Erstelle neues Fahrzeug mit Daten:", data);

    const newFahrzeug = await prisma.fahrzeug.create({
      data: {
        marke: data.marke,
        modell: data.modell,
        basisPreis: data.basisPreis,
        bildUrl: data.bildUrl,
        beschreibung: data.beschreibung,
        verfuegbar: data.verfuegbar,
        kategorieId: data.kategorieId,
        baujahr: data.baujahr, 
      },
    });

    return NextResponse.json(newFahrzeug);
  } catch (error) {
    console.error("Fehler beim Erstellen des Fahrzeugs:", error);
    return NextResponse.json(
      { error: error.message || "Fehler beim Erstellen des Fahrzeugs" },
      { status: 500 }
    );
  }
}

// app/api/admin/fahrzeuge/delete/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function DELETE(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  try {
    const { id } = await req.json(); // Erwartet die Fahrzeug-ID im Body
    if (!id) {
      return NextResponse.json({ error: "Fahrzeug-ID fehlt" }, { status: 400 });
    }

    const deletedFahrzeug = await prisma.fahrzeug.delete({
      where: { id },
    });

    return NextResponse.json({ message: "Fahrzeug erfolgreich gelöscht", deletedFahrzeug });
  } catch (error) {
    console.error("Fehler beim Löschen des Fahrzeugs:", error);
    return NextResponse.json(
      { error: "Fehler beim Löschen des Fahrzeugs" },
      { status: 500 }
    );
  }
}

// app/api/admin/fahrzeuge/update/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { writeFile } from "fs/promises";
import { join } from "path";
import { existsSync, mkdirSync } from "fs";

export async function PUT(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  try {
    const formData = await req.formData();
    const id = formData.get("id") as string;

    if (!id) {
      return NextResponse.json({ error: "Fahrzeug-ID fehlt" }, { status: 400 });
    }

    const updateData: any = {};
    const marke = formData.get("marke") as string;
    const modell = formData.get("modell") as string;
    const basisPreis = formData.get("basisPreis") as string;
    const bildUrl = formData.get("bildUrl");
    const beschreibung = formData.get("beschreibung") as string;
    const baujahr = formData.get("baujahr") as string;
    const verfuegbar = formData.get("verfuegbar") as string;
    const kategorieId = formData.get("kategorieId") as string;

    console.log("Eingehende FormData:", {
      id,
      marke,
      modell,
      basisPreis,
      bildUrl,
      beschreibung,
      baujahr,
      verfuegbar,
      kategorieId,
    });

    if (marke) updateData.marke = marke;
    if (modell) updateData.modell = modell;
    if (basisPreis) {
      const parsedPreis = parseFloat(basisPreis);
      if (isNaN(parsedPreis)) {
        return NextResponse.json({ error: "Ungültiger Basispreis" }, { status: 400 });
      }
      updateData.basisPreis = parsedPreis;
    }
    if (bildUrl instanceof File) {
      const buffer = Buffer.from(await bildUrl.arrayBuffer());
      const fileName = `${Date.now()}-${bildUrl.name}`;
      const uploadDir = join(process.cwd(), "public/uploads");
      const filePath = join(uploadDir, fileName);

      // Erstelle den Upload-Ordner, falls er nicht existiert
      if (!existsSync(uploadDir)) {
        mkdirSync(uploadDir, { recursive: true });
        console.log("Uploads-Ordner erstellt:", uploadDir);
      }

      console.log("Speichere Bild unter:", filePath);
      await writeFile(filePath, buffer);
      updateData.bildUrl = `/uploads/${fileName}`;
    }
    if (beschreibung) updateData.beschreibung = beschreibung;
    if (baujahr) {
      const parsedBaujahr = parseInt(baujahr);
      if (isNaN(parsedBaujahr)) {
        return NextResponse.json({ error: "Ungültiges Baujahr" }, { status: 400 });
      }
      updateData.baujahr = parsedBaujahr;
    }
    if (verfuegbar !== null && verfuegbar !== undefined) {
      updateData.verfuegbar = verfuegbar === "true";
    }
    if (kategorieId) updateData.kategorieId = kategorieId;

    if (Object.keys(updateData).length === 0) {
      return NextResponse.json({ error: "Keine Daten zum Aktualisieren" }, { status: 400 });
    }

    console.log("Update-Daten für Prisma:", updateData);

    const updatedFahrzeug = await prisma.fahrzeug.update({
      where: { id },
      data: updateData,
    });

    return NextResponse.json(updatedFahrzeug);
  } catch (error) {
    console.error("Fehler beim Aktualisieren:", error);
    return NextResponse.json(
      { error: error.message || "Fehler beim Aktualisieren des Fahrzeugs" },
      { status: 500 }
    );
  }
}

// app/api/admin/fahrzeuge/upload/[id]/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { writeFile } from "fs/promises";
import path from "path";

export async function POST(req: Request, { params }: { params: { id: string } }) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  const formData = await req.formData();
  const file = formData.get("file") as File;

  if (!file) {
    return NextResponse.json({ error: "Keine Datei hochgeladen" }, { status: 400 });
  }

  const buffer = Buffer.from(await file.arrayBuffer());
  const filePath = path.join(process.cwd(), "public/uploads", file.name);
  
  await writeFile(filePath, buffer);

  const updatedFahrzeug = await prisma.fahrzeug.update({
    where: { id: params.id },
    data: { bildUrl: `/uploads/${file.name}` },
  });

  return NextResponse.json(updatedFahrzeug);
}


// app/api/admin/fahrzeugkategorien/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function GET(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  try {
    const kategorien = await prisma.fahrzeugKategorie.findMany({
      select: {
        id: true,
        name: true, // Wir verwenden das "name"-Feld für die Anzeige
      },
    });
    return NextResponse.json(kategorien);
  } catch (error) {
    console.error("Fehler beim Abrufen der Fahrzeugkategorien:", error);
    return NextResponse.json(
      { error: "Fehler beim Abrufen der Fahrzeugkategorien" },
      { status: 500 }
    );
  }
}

// app/api/admin/kunden/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import bcrypt from "bcrypt";

function generateRandomPassword(length: number = 12): string {
  const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
  let password = "";
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset[randomIndex];
  }
  return password;
}

export async function GET() {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  try {
    const users = await prisma.user.findMany({
      include: {
        konfigurationen: {
          where: {
            isBestellt: true,
          },
          select: { id: true },
        },
      },
    });

    const formattedUsers = users.map((user) => ({
      id: user.id,
      firstName: user.firstName || "", 
      lastName: user.lastName || "", 
      email: user.email,
      street: user.street,           
      houseNumber: user.houseNumber, 
      postalCode: user.postalCode,   
      city: user.city,              
      orderCount: user.konfigurationen.length,
      createdAt: user.createdAt.toISOString(),
    }));

    return NextResponse.json({ users: formattedUsers });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Laden der Nutzer" }, { status: 500 });
  }
}

export async function POST(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  const { firstName, lastName, email, street, houseNumber, postalCode, city } = await req.json();

  try {
    const plainPassword = generateRandomPassword();
    const hashedPassword = await bcrypt.hash(plainPassword, 10);

    const newUser = await prisma.user.create({
      data: {
        firstName,
        lastName,
        email,
        password: hashedPassword,
        role: "USER",
        street,
        houseNumber,
        postalCode,
        city,
      },
    });

    return NextResponse.json({
      id: newUser.id,
      firstName: newUser.firstName,
      lastName: newUser.lastName,
      email: newUser.email,
      street: newUser.street,
      houseNumber: newUser.houseNumber,
      postalCode: newUser.postalCode,
      city: newUser.city,
      orderCount: 0,
      createdAt: newUser.createdAt.toISOString(),
      generatedPassword: plainPassword,
    });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Erstellen des Nutzers" }, { status: 500 });
  }
}

// app/api/admin/kunden/[id]/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function GET(req: Request, { params }: { params: { id: string } }) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  const { id } = params;

  try {
    const user = await prisma.user.findUnique({
      where: { id },
      include: {
        konfigurationen: {
          where: {
            isBestellt: true,
          },
          select: { id: true },
        },
      },
    });

    if (!user) {
      return NextResponse.json({ error: "Nutzer nicht gefunden" }, { status: 404 });
    }

    const formattedUser = {
      id: user.id,
      firstName: user.firstName || "", 
      lastName: user.lastName || "",  
      email: user.email,
      street: user.street,           
      houseNumber: user.houseNumber, 
      postalCode: user.postalCode,  
      city: user.city,              
      orderCount: user.konfigurationen.length,
      createdAt: user.createdAt.toISOString(),
    };

    return NextResponse.json({ user: formattedUser });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Laden des Nutzers" }, { status: 500 });
  }
}

export async function PUT(req: Request, { params }: { params: { id: string } }) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  const { id } = params;
  const { firstName, lastName, email, street, houseNumber, postalCode, city } = await req.json();

  try {
    const updatedUser = await prisma.user.update({
      where: { id },
      data: { firstName, lastName, email, street, houseNumber, postalCode, city },
    });

    const konfigurationen = await prisma.konfiguration.findMany({
      where: { userId: id, isBestellt: true },
    });
    const orderCount = konfigurationen.length;

    return NextResponse.json({
      id: updatedUser.id,
      firstName: updatedUser.firstName,
      lastName: updatedUser.lastName,
      email: updatedUser.email,
      street: updatedUser.street,
      houseNumber: updatedUser.houseNumber,
      postalCode: updatedUser.postalCode,
      city: updatedUser.city,
      orderCount,
      createdAt: updatedUser.createdAt.toISOString(),
    });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Aktualisieren des Nutzers" }, { status: 500 });
  }
}

export async function DELETE(req: Request, { params }: { params: { id: string } }) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  const { id } = params;

  try {
    await prisma.user.delete({
      where: { id },
    });
    return NextResponse.json({ message: "Nutzer gelöscht" });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Löschen des Nutzers" }, { status: 500 });
  }
}

// app/api/admin/motoren/update/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function PUT(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  try {
    const { id, name, ps, preis } = await req.json();

    if (!id) {
      return NextResponse.json({ error: "Motor-ID fehlt" }, { status: 400 });
    }

    const updateData: any = {};
    if (name) updateData.name = name;
    if (ps !== undefined) {
      const parsedPs = parseInt(ps);
      if (isNaN(parsedPs)) {
        return NextResponse.json({ error: "Ungültige PS-Zahl" }, { status: 400 });
      }
      updateData.ps = parsedPs;
    }
    if (preis !== undefined) {
      const parsedPreis = parseFloat(preis);
      if (isNaN(parsedPreis)) {
        return NextResponse.json({ error: "Ungültiger Preis" }, { status: 400 });
      }
      updateData.preis = parsedPreis;
    }

    if (Object.keys(updateData).length === 0) {
      return NextResponse.json({ error: "Keine Daten zum Aktualisieren" }, { status: 400 });
    }

    const updatedMotor = await prisma.motor.update({
      where: { id },
      data: updateData,
    });

    return NextResponse.json(updatedMotor);
  } catch (error) {
    console.error("Fehler beim Aktualisieren:", error);
    return NextResponse.json(
      { error: error.message || "Fehler beim Aktualisieren des Motors" },
      { status: 500 }
    );
  }
}

// app/api/auth/[...nextauth]/route.ts

import { authOptions } from "@/lib/auth";
import NextAuth from "next-auth";

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };

// app/api/bestellungen/route.ts

// app/api/bestellungen/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function GET() {
  const session = await getServerSession(authOptions);
  if (!session || !session.user) {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 401 });
  }

  try {
    const bestellungen = await prisma.bestellung.findMany({
      where: { userId: session.user.id },
      include: {
        konfiguration: {
          include: { fahrzeug: true },
        },
      },
    });

    const formattedBestellungen = bestellungen.map((bestellung) => ({
      id: bestellung.id,
      konfigurationId: bestellung.konfigurationId,
      fahrzeugName: `${bestellung.konfiguration.fahrzeug.marke} ${bestellung.konfiguration.fahrzeug.modell}`,
      gesamtPreis: bestellung.konfiguration.gesamtpreis,
      bestellDatum: bestellung.bestellDatum,
      lieferDatum: bestellung.lieferDatum,
      status: bestellung.status,
    }));

    return NextResponse.json({ bestellungen: formattedBestellungen });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Laden der Bestellungen" }, { status: 500 });
  }
}

// app/api/bestellungen/create/route.ts

// app/api/bestellungen/create/route.ts
import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function POST(req: NextRequest) {
  const session = await getServerSession(authOptions);
  if (!session || !session.user) {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 401 });
  }

  const { konfigurationId } = await req.json();

  try {
    const konfiguration = await prisma.konfiguration.findUnique({
      where: { id: konfigurationId, userId: session.user.id },
    });

    if (!konfiguration) {
      return NextResponse.json({ error: "Konfiguration nicht gefunden" }, { status: 404 });
    }

    const bestellung = await prisma.bestellung.create({
      data: {
        userId: session.user.id,
        konfigurationId,
        status: "Neu",
        bestellDatum: new Date(),
        lieferDatum: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // +90 дней (пример)
      },
    });

    // Обновляем конфигурацию как "Bestellt"
    await prisma.konfiguration.update({
      where: { id: konfigurationId },
      data: { isBestellt: true },
    });

    return NextResponse.json({ message: "Bestellung erstellt", bestellung });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Erstellen der Bestellung" }, { status: 500 });
  }
}

// app/api/bestellungen/update/[id]/route.ts

// app/api/bestellungen/update/[id]/route.ts
import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  const { id } = params;
  const { status } = await req.json();

  try {
    const bestellung = await prisma.bestellung.update({
      where: { id },
      data: { status },
    });

    return NextResponse.json({ message: "Status aktualisiert", bestellung });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Aktualisieren des Status" }, { status: 500 });
  }
}

// app/api/konfigurator/data/route.ts

// app/api/konfigurator/data/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

export async function GET() {
  try {
    const [fahrzeuge, motoren, farben, felgen, ausstattungen, kategorien] = await Promise.all([
      prisma.fahrzeug.findMany({ include: { kategorie: true } }),
      prisma.motor.findMany(),
      prisma.farbe.findMany(),
      prisma.felgen.findMany(),
      prisma.fahrzeugAusstattung.findMany(),
      prisma.fahrzeugKategorie.findMany({ include: { fahrzeuge: true } }),
    ]);

    return NextResponse.json({
      fahrzeuge,
      motoren,
      farben,
      felgen,
      ausstattungen,
      kategorien,
    });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Laden der Daten" }, { status: 500 });
  }
}

// app/api/konfigurator/delete/[id]/route.ts

// app/api/konfigurator/delete/[id]/route.ts
import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {
  const session = await getServerSession(authOptions);
  if (!session || !session.user) {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 401 });
  }

  const { id } = params;

  try {
    // Prüfen, ob die Konfiguration dem Benutzer gehört
    const konfiguration = await prisma.konfiguration.findUnique({
      where: { id, userId: session.user.id },
    });

    if (!konfiguration) {
      return NextResponse.json({ error: "Konfiguration nicht gefunden" }, { status: 404 });
    }

    // Verknüpfte Datensätze in der Tabelle KonfigurationAusstattung löschen
    await prisma.konfigurationAusstattung.deleteMany({
      where: { konfigurationId: id },
    });


    await prisma.konfiguration.delete({
      where: { id },
    });

    return NextResponse.json({ message: "Konfiguration gelöscht" });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Löschen der Konfiguration" }, { status: 500 });
  }
}

// app/api/konfigurator/save/route.ts

// app/api/konfigurator/save/route.ts
import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function POST(req: NextRequest) {
  const session = await getServerSession(authOptions);
  if (!session || !session.user) {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 401 });
  }

  try {
    const body = await req.json();
    const { fahrzeugId, motorId, farbeId, felgenId, ausstattungIds, gesamtpreis } = body;

    const konfiguration = await prisma.konfiguration.create({
      data: {
        userId: session.user.id,
        fahrzeugId,
        motorId,
        farbeId,
        felgenId,
        gesamtpreis,
        ausstattungen: {
          create: ausstattungIds.map((id: string) => ({
            ausstattungId: id,
          })),
        },
      },
      include: { ausstattungen: true },
    });

    return NextResponse.json({ message: "Konfiguration gespeichert", konfiguration });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Speichern der Konfiguration" }, { status: 500 });
  }
}

// app/api/profil/route.ts

// app/api/profil/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function PUT(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session || !session.user.id) {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  const { firstName, lastName, email } = await req.json();

  try {
    const updatedUser = await prisma.user.update({
      where: { id: session.user.id },
      data: { firstName, lastName, email },
    });

    return NextResponse.json({
      id: updatedUser.id,
      firstName: updatedUser.firstName,
      lastName: updatedUser.lastName,
      email: updatedUser.email,
    });
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Aktualisieren des Profils" }, { status: 500 });
  }
}

// app/api/profil/address/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function PUT(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session) {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  const { street, houseNumber, postalCode, city } = await req.json();

  try {
    const updatedUser = await prisma.user.update({
      where: { id: session.user.id },
      data: { street, houseNumber, postalCode, city },
    });

    return NextResponse.json(updatedUser);
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Aktualisieren der Adresse" }, { status: 500 });
  }
}

// app/api/profil/password/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import bcrypt from "bcrypt";

export async function PUT(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session) {
    return NextResponse.json({ error: "Nicht autorisiert" }, { status: 403 });
  }

  const { currentPassword, newPassword } = await req.json();

  try {
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
    });

    if (!user) {
      return NextResponse.json({ error: "Nutzer nicht gefunden" }, { status: 404 });
    }

    const passwordMatch = await bcrypt.compare(currentPassword, user.password);
    if (!passwordMatch) {
      return NextResponse.json({ error: "Aktuelles Passwort ist falsch" }, { status: 400 });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);

    const updatedUser = await prisma.user.update({
      where: { id: session.user.id },
      data: { password: hashedPassword },
    });

    return NextResponse.json(updatedUser);
  } catch (error) {
    return NextResponse.json({ error: "Fehler beim Ändern des Passworts" }, { status: 500 });
  }
}

// app/api/register/route.ts

import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import * as bcrypt from "bcrypt";
import { z } from "zod";

const registerSchema = z.object({
  email: z.string().email("Bitte geben Sie eine gültige E-Mail-Adresse ein"),
  password: z.string().min(8, "Das Passwort muss mindestens 8 Zeichen lang sein"),
  firstName: z.string().min(2, "Der Vorname muss mindestens 2 Zeichen lang sein"),
  lastName: z.string().min(2, "Der Nachname muss mindestens 2 Zeichen lang sein"),
  street: z.string().min(2, "Bitte geben Sie eine gültige Straße ein"),
  houseNumber: z.string().min(1, "Bitte geben Sie eine gültige Hausnummer ein"),
  postalCode: z.string().min(5, "Bitte geben Sie eine gültige Postleitzahl ein"),
  city: z.string().min(2, "Bitte geben Sie eine gültige Stadt ein"),
});

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { email, password, firstName, lastName, street, houseNumber, postalCode, city } =
      registerSchema.parse(body);

    const normalizedEmail = email.toLowerCase();

    const existingUser = await prisma.user.findUnique({
      where: { email: normalizedEmail },
    });

    if (existingUser) {
      return NextResponse.json(
        { error: "Ein Benutzer mit dieser E-Mail existiert bereits" },
        { status: 409 }
      );
    }


    const hashedPassword = await bcrypt.hash(password, 10);

 
    const user = await prisma.user.create({
      data: {
        email: normalizedEmail, 
        password: hashedPassword,
        firstName,
        lastName,
        street,
        houseNumber,
        postalCode,
        city,
        role: "USER",
      },
    });

    return NextResponse.json(
      {
        message: "Registrierung erfolgreich",
        user: { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName },
      },
      { status: 201 }
    );
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: error.errors.map((e) => e.message).join(", ") },
        { status: 400 }
      );
    }
    return NextResponse.json(
      { error: "Ein Fehler ist bei der Registrierung aufgetreten" },
      { status: 500 }
    );
  }
}

// app/api/verwaltung/route.ts

// app/api/verwaltung/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";


export async function GET() {

  const session = await getServerSession(authOptions);

 
  if (!session || !session.user) {
    return NextResponse.json(
      { error: "Nicht autorisiert" }, // Fehlermeldung bei fehlender Authentifizierung
      { status: 401 }
    );
  }

  try {
    
    const konfigurationen = await prisma.konfiguration.findMany({
      where: { userId: session.user.id }, 
      include: {
        fahrzeug: true, 
        motor: true,    
        farbe: true,   
        felgen: true,   
        ausstattungen: true, 
      },
    });

    
    const bestellungen = []; // Platzhalter für Bestellungen (noch nicht implementiert)

    // Erfolgreiche Antwort mit Konfigurationen und Bestellungen zurückgeben
    return NextResponse.json({ konfigurationen, bestellungen });
  } catch (error) {
    
    return NextResponse.json(
      { error: "Fehler beim Laden der Daten" }, 
      { status: 500 }
    );
  }
}

// app/katalog/page.tsx

"use client";

import React, { useState } from "react";
import Layout from "@/components/Layout";
import { useAppContext } from "@/context/AppContext";
import FahrzeugCard from "@/components/FahrzeugCard";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, X, Filter, CarFront } from "lucide-react";

export default function Katalog() {
  const { fahrzeuge, kategorien, setFahrzeug } = useAppContext(); 
  const [searchTerm, setSearchTerm] = useState("");

 
  const handleConfigure = (fahrzeugId: string) => {
    setFahrzeug(fahrzeugId);
  
  };

  const filteredFahrzeuge = fahrzeuge.filter(
    (fahrzeug) =>
      fahrzeug.marke.toLowerCase().includes(searchTerm.toLowerCase()) ||
      fahrzeug.modell.toLowerCase().includes(searchTerm.toLowerCase()) ||
      fahrzeug.beschreibung.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <Layout>
      <div className="content-container max-w-7xl mx-auto">
        <div className="mb-10">
          <h1 className="section-title">Fahrzeugkatalog</h1>
          <p className="text-muted-foreground max-w-2xl">
            Entdecken Sie unsere vielfältige Auswahl an Premium-Fahrzeugen und finden Sie Ihr Traumauto.
            Nutzen Sie die Filteroptionen, um genau das zu finden, wonach Sie suchen.
          </p>
        </div>

        <div className="bg-card rounded-lg p-4 shadow-sm mb-8">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="relative flex-grow">
              <Search className="absolute left-3 top-2.5 h-5 w-5 text-muted-foreground" />
              <Input
                type="text"
                placeholder="Suchen Sie nach Marke, Modell oder Eigenschaften..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-10 bg-background"
              />
              {searchTerm && (
                <button
                  className="absolute right-3 top-2.5 text-muted-foreground hover:text-foreground"
                  onClick={() => setSearchTerm("")}
                >
                  <X className="h-5 w-5" />
                </button>
              )}
            </div>
            <Button variant="outline" className="whitespace-nowrap">
              <Filter className="h-4 w-4 mr-2" />
              Filter
            </Button>
          </div>
        </div>

        <Tabs defaultValue="alle" className="mb-8">
          <TabsList className="mb-6 bg-card border p-1 justify-start overflow-x-auto flex-nowrap w-full">
            <TabsTrigger value="alle" className="data-[state=active]:bg-primary data-[state=active]:text-white">
              Alle Fahrzeuge
            </TabsTrigger>
            {kategorien.map((kategorie) => (
              <TabsTrigger
                key={kategorie.id}
                value={kategorie.id}
                className="data-[state=active]:bg-primary data-[state=active]:text-white"
              >
                {kategorie.name}
              </TabsTrigger>
            ))}
          </TabsList>

          <TabsContent value="alle">
            {filteredFahrzeuge.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredFahrzeuge.map((fahrzeug) => (
                  <FahrzeugCard
                    key={fahrzeug.id}
                    fahrzeug={fahrzeug}
                    onConfigure={handleConfigure} 
                  />
                ))}
              </div>
            ) : (
              <div className="text-center py-16 bg-card rounded-lg border">
                <CarFront className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">Keine Fahrzeuge gefunden</h3>
                <p className="text-muted-foreground">
                  Keine Fahrzeuge gefunden, die Ihren Suchkriterien entsprechen.
                </p>
                {searchTerm && (
                  <Button
                    variant="outline"
                    className="mt-4"
                    onClick={() => setSearchTerm("")}
                  >
                    Suche zurücksetzen
                  </Button>
                )}
              </div>
            )}
          </TabsContent>

          {kategorien.map((kategorie) => (
            <TabsContent key={kategorie.id} value={kategorie.id}>
              {kategorie.fahrzeuge
                .filter(
                  (fahrzeug) =>
                    fahrzeug.marke.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    fahrzeug.modell.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    fahrzeug.beschreibung.toLowerCase().includes(searchTerm.toLowerCase())
                ).length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {kategorie.fahrzeuge
                    .filter(
                      (fahrzeug) =>
                        fahrzeug.marke.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        fahrzeug.modell.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        fahrzeug.beschreibung.toLowerCase().includes(searchTerm.toLowerCase())
                    )
                    .map((fahrzeug) => (
                      <FahrzeugCard
                        key={fahrzeug.id}
                        fahrzeug={fahrzeug}
                        onConfigure={handleConfigure} 
                      />
                    ))}
                </div>
              ) : (
                <div className="text-center py-16 bg-card rounded-lg border">
                  <CarFront className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
                  <h3 className="text-lg font-medium mb-2">Keine Fahrzeuge gefunden</h3>
                  <p className="text-muted-foreground">
                    Keine Fahrzeuge in dieser Kategorie gefunden, die Ihren Suchkriterien entsprechen.
                  </p>
                  {searchTerm && (
                    <Button
                      variant="outline"
                      className="mt-4"
                      onClick={() => setSearchTerm("")}
                    >
                      Suche zurücksetzen
                    </Button>
                  )}
                </div>
              )}
            </TabsContent>
          ))}
        </Tabs>
      </div>
    </Layout>
  );
}

// app/katalog/[id]/page.tsx

"use client";

import React from "react";
import { useParams, useRouter } from "next/navigation";
import Layout from "@/components/Layout";
import { useAppContext } from "@/context/AppContext";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import {
  Check,
  XCircle,
  ChevronLeft,
  ArrowRight,
  Calendar,
  Fuel,
  Gauge,
  BadgeEuro,
} from "lucide-react";
import { Separator } from "@/components/ui/separator";

export default function FahrzeugDetail() {
  const { id } = useParams<{ id: string }>();
  const router = useRouter();
  const { fahrzeuge, setFahrzeug } = useAppContext();

  const fahrzeug = fahrzeuge.find((f) => f.id === id);

  if (!fahrzeug) {
    return (
      <Layout>
        <div className="container mx-auto py-16 px-4 text-center">
          <XCircle className="mx-auto h-16 w-16 text-red-500 mb-4" />
          <h1 className="text-2xl font-bold mb-4">Fahrzeug nicht gefunden</h1>
          <p className="mb-8">Das von Ihnen gesuchte Fahrzeug konnte nicht gefunden werden.</p>
          <Button onClick={() => router.push("/katalog")}>
            Zurück zum Katalog
          </Button>
        </div>
      </Layout>
    );
  }

  const handleKonfigurieren = () => {
    setFahrzeug(fahrzeug.id);
    router.push("/konfigurator");
  };

  return (
    <Layout>
      <div className="container mx-auto py-8 px-4">
        <div className="mb-6">
          <Button
            variant="ghost"
            onClick={() => router.push("/katalog")}
            className="flex items-center text-gray-600 hover:text-gray-900"
          >
            <ChevronLeft className="mr-1 h-4 w-4" />
            Zurück zum Katalog
          </Button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
          <div className="overflow-hidden rounded-lg">
            <img
              src={fahrzeug.bildUrl}
              alt={`${fahrzeug.marke} ${fahrzeug.modell}`}
              className="w-full h-auto object-cover"
            />
          </div>
          <div>
            <div className="flex justify-between items-start">
              <div>
                <h1 className="text-3xl font-bold">{fahrzeug.marke} {fahrzeug.modell}</h1>
                <p className="text-gray-600">Baujahr {fahrzeug.baujahr}</p>
              </div>
              <div className="text-right">
                <div className="text-2xl font-bold">{fahrzeug.basisPreis.toLocaleString("de-DE")} €</div>
                <p className="text-sm text-gray-600">Grundpreis ohne Extras</p>
              </div>
            </div>
            <Separator className="my-6" />
            <p className="text-lg mb-6">{fahrzeug.beschreibung}</p>
            <div className="grid grid-cols-2 gap-4 mb-8">
              <div className="flex items-center">
                <Calendar className="h-5 w-5 mr-2 text-primary" />
                <span>Baujahr: {fahrzeug.baujahr}</span>
              </div>
              <div className="flex items-center">
                <Fuel className="h-5 w-5 mr-2 text-primary" />
                <span>Verfügbare Antriebe: Benzin, Diesel, Hybrid</span>
              </div>
              <div className="flex items-center">
                <Gauge className="h-5 w-5 mr-2 text-primary" />
                <span>Leistung: bis zu 286 PS</span>
              </div>
              <div className="flex items-center">
                <BadgeEuro className="h-5 w-5 mr-2 text-primary" />
                <span>Basispreis: {fahrzeug.basisPreis.toLocaleString("de-DE")} €</span>
              </div>
            </div>
            <div className="flex items-center mb-6">
              <div
                className={`p-1 rounded-full ${
                  fahrzeug.verfuegbar ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"
                } flex items-center mr-2`}
              >
                {fahrzeug.verfuegbar ? (
                  <Check className="h-4 w-4" />
                ) : (
                  <XCircle className="h-4 w-4" />
                )}
              </div>
              <span>{fahrzeug.verfuegbar ? "Sofort verfügbar" : "Nicht verfügbar"}</span>
            </div>
            <div className="space-y-4">
              <Button
                onClick={handleKonfigurieren}
                className="w-full flex items-center justify-center"
                disabled={!fahrzeug.verfuegbar}
              >
                <span>Dieses Fahrzeug konfigurieren</span>
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
              <Button
                variant="outline"
                className="w-full"
                onClick={() =>
                  window.open(
                    `mailto:info@autokonfigurator.de?subject=Anfrage zu ${fahrzeug.marke} ${fahrzeug.modell}`,
                    "_blank"
                  )
                }
              >
                Kontakt zum Berater
              </Button>
            </div>
          </div>
        </div>

        <Separator className="my-8" />

        <section className="mb-12">
          <h2 className="text-2xl font-bold mb-6">Ähnliche Fahrzeuge</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {fahrzeuge
              .filter((f) => f.id !== fahrzeug.id)
              .slice(0, 3)
              .map((similarFahrzeug) => (
                <Link key={similarFahrzeug.id} href={`/katalog/${similarFahrzeug.id}`} className="block">
                  <div className="rounded-lg overflow-hidden border hover:shadow-md transition-shadow">
                    <div className="h-48 overflow-hidden">
                      <img
                        src={similarFahrzeug.bildUrl}
                        alt={`${similarFahrzeug.marke} ${similarFahrzeug.modell}`}
                        className="w-full h-full object-cover"
                      />
                    </div>
                    <div className="p-4">
                      <h3 className="font-semibold">{similarFahrzeug.marke} {similarFahrzeug.modell}</h3>
                      <p className="text-gray-600 text-sm mb-2">Baujahr {similarFahrzeug.baujahr}</p>
                      <p className="font-semibold">{similarFahrzeug.basisPreis.toLocaleString("de-DE")} €</p>
                    </div>
                  </div>
                </Link>
              ))}
          </div>
        </section>
      </div>
    </Layout>
  );
}

// app/konfigurator/page.tsx

"use client";

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import Layout from "@/components/Layout";
import { useAppContext } from "@/context/AppContext";
import KonfigurationsUebersicht from "@/components/KonfigurationsUebersicht";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent } from "@/components/ui/tabs";
import { ChevronRight } from "lucide-react";
import KonfiguratorTabs from "@/components/konfigurator/KonfiguratorTabs";
import FahrzeugTab from "@/components/konfigurator/FahrzeugTab";
import MotorTab from "@/components/konfigurator/MotorTab";
import FarbeTab from "@/components/konfigurator/FarbeTab";
import FelgenTab from "@/components/konfigurator/FelgenTab";
import AusstattungTab from "@/components/konfigurator/AusstattungTab";
import ZusammenfassungTab from "@/components/konfigurator/ZusammenfassungTab";
import NavigationButtons from "@/components/konfigurator/NavigationButtons";

export default function Konfigurator() {
  const router = useRouter();
  const {
    aktuellesFahrzeug,
    aktuellerMotor,
    aktuelleFarbe,
    aktuelleFelgen,
    validateStep,
  } = useAppContext();

  const [activeTab, setActiveTab] = useState("fahrzeug");

 
  const isTabEnabled = (tab: string) => {
    switch (tab) {
      case "fahrzeug":
        return true;
      case "motor":
        return !!aktuellesFahrzeug;
      case "farbe":
        return !!aktuellesFahrzeug && !!aktuellerMotor;
      case "felgen":
        return !!aktuellesFahrzeug && !!aktuellerMotor && !!aktuelleFarbe;
      case "ausstattung":
        return !!aktuellesFahrzeug && !!aktuellerMotor && !!aktuelleFarbe && !!aktuelleFelgen;
      case "zusammenfassung":
        return !!aktuellesFahrzeug && !!aktuellerMotor && !!aktuelleFarbe && !!aktuelleFelgen;
      default:
        return false;
    }
  };

  const handleTabChange = (value: string) => {
    if (isTabEnabled(value)) {
      setActiveTab(value);
    }
  };

  const handleNextTab = () => {
    const nextTabs = {
      fahrzeug: "motor",
      motor: "farbe",
      farbe: "felgen",
      felgen: "ausstattung",
      ausstattung: "zusammenfassung",
    };
    if (isTabEnabled(nextTabs[activeTab as keyof typeof nextTabs])) {
      setActiveTab(nextTabs[activeTab as keyof typeof nextTabs]);
    }
  };

  const handlePreviousTab = () => {
    const prevTabs = {
      zusammenfassung: "ausstattung",
      ausstattung: "felgen",
      felgen: "farbe",
      farbe: "motor",
      motor: "fahrzeug",
    };
    if (activeTab !== "fahrzeug") {
      setActiveTab(prevTabs[activeTab as keyof typeof prevTabs]);
    }
  };

  return (
    <Layout>
      <div className="container mx-auto py-8 px-4">
        <h1 className="text-3xl font-bold mb-8">Fahrzeug-Konfigurator</h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
              <KonfiguratorTabs activeTab={activeTab} onTabChange={handleTabChange} isTabEnabled={isTabEnabled} />
              <TabsContent value="fahrzeug" className="space-y-6">
                <FahrzeugTab onNext={handleNextTab} />
                <NavigationButtons
                  showPrevious={false}
                  showNext={true}
                  onNext={handleNextTab}
                  nextDisabled={!aktuellesFahrzeug}
                  onPrevious={() => {}}
                />
              </TabsContent>
              <TabsContent value="motor" className="space-y-6">
                <MotorTab />
                <NavigationButtons
                  showPrevious={true}
                  showNext={true}
                  onPrevious={handlePreviousTab}
                  onNext={handleNextTab}
                  nextDisabled={!aktuellerMotor}
                />
              </TabsContent>
              <TabsContent value="farbe" className="space-y-6">
                <FarbeTab />
                <NavigationButtons
                  showPrevious={true}
                  showNext={true}
                  onPrevious={handlePreviousTab}
                  onNext={handleNextTab}
                  nextDisabled={!aktuelleFarbe}
                />
              </TabsContent>
              <TabsContent value="felgen" className="space-y-6">
                <FelgenTab />
                <NavigationButtons
                  showPrevious={true}
                  showNext={true}
                  onPrevious={handlePreviousTab}
                  onNext={handleNextTab}
                  nextDisabled={!aktuelleFelgen}
                />
              </TabsContent>
              <TabsContent value="ausstattung" className="space-y-6">
                <AusstattungTab />
                <NavigationButtons
                  showPrevious={true}
                  showNext={true}
                  onPrevious={handlePreviousTab}
                  onNext={handleNextTab}
                  nextText="Weiter zur Zusammenfassung"
                />
              </TabsContent>
              <TabsContent value="zusammenfassung" className="space-y-6">
                <ZusammenfassungTab onPrevious={handlePreviousTab} />
              </TabsContent>
            </Tabs>
          </div>
          <div className="lg:col-span-1">
            <div className="sticky top-24">
              <h2 className="text-xl font-semibold mb-4">Ihre Konfiguration</h2>
              <KonfigurationsUebersicht />
              {activeTab !== "zusammenfassung" && isTabEnabled("zusammenfassung") && (
                <div className="mt-6 text-right">
                  <Button
                    onClick={() => setActiveTab("zusammenfassung")}
                    variant="outline"
                    className="flex items-center ml-auto"
                  >
                    Zur Zusammenfassung
                    <ChevronRight className="ml-1 h-4 w-4" />
                  </Button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}

// app/konfigurator/[id]/page.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import Layout from "@/components/Layout";
import { useAppContext } from "@/context/AppContext";
import KonfigurationsUebersicht from "@/components/KonfigurationsUebersicht";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent } from "@/components/ui/tabs";
import { ChevronRight } from "lucide-react";
import KonfiguratorTabs from "@/components/konfigurator/KonfiguratorTabs";
import FahrzeugTab from "@/components/konfigurator/FahrzeugTab";
import MotorTab from "@/components/konfigurator/MotorTab";
import FarbeTab from "@/components/konfigurator/FarbeTab";
import FelgenTab from "@/components/konfigurator/FelgenTab";
import AusstattungTab from "@/components/konfigurator/AusstattungTab";
import ZusammenfassungTab from "@/components/konfigurator/ZusammenfassungTab";
import NavigationButtons from "@/components/konfigurator/NavigationButtons";

export default function KonfiguratorWithId() {
  const { id } = useParams<{ id: string }>();
  const router = useRouter();
  const {
    fahrzeuge,
    aktuellesFahrzeug,
    aktuellerMotor,
    aktuelleFarbe,
    aktuelleFelgen,
    setFahrzeug,
  } = useAppContext();

  const [activeTab, setActiveTab] = useState("fahrzeug");

  useEffect(() => {
    if (id && fahrzeuge.length > 0 && !aktuellesFahrzeug) {
      const selectedFahrzeug = fahrzeuge.find((f) => f.id === id);
      if (selectedFahrzeug) {
        setFahrzeug(id);
        setActiveTab("motor");
      }
    }
  }, [id, fahrzeuge, setFahrzeug, aktuellesFahrzeug]);

  const isTabEnabled = (tab: string) => {
    switch (tab) {
      case "fahrzeug":
        return true;
      case "motor":
        return !!aktuellesFahrzeug;
      case "farbe":
        return !!aktuellesFahrzeug && !!aktuellerMotor;
      case "felgen":
        return !!aktuellesFahrzeug && !!aktuellerMotor && !!aktuelleFarbe;
      case "ausstattung":
        return !!aktuellesFahrzeug && !!aktuellerMotor && !!aktuelleFarbe && !!aktuelleFelgen;
      case "zusammenfassung":
        return !!aktuellesFahrzeug && !!aktuellerMotor && !!aktuelleFarbe && !!aktuelleFelgen;
      default:
        return false;
    }
  };

  const handleTabChange = (value: string) => {
    if (isTabEnabled(value)) {
      setActiveTab(value);
    }
  };

  const handleNextTab = () => {
    const nextTabs = {
      fahrzeug: "motor",
      motor: "farbe",
      farbe: "felgen",
      felgen: "ausstattung",
      ausstattung: "zusammenfassung",
    };
    if (isTabEnabled(nextTabs[activeTab as keyof typeof nextTabs])) {
      setActiveTab(nextTabs[activeTab as keyof typeof nextTabs]);
    }
  };

  const handlePreviousTab = () => {
    const prevTabs = {
      zusammenfassung: "ausstattung",
      ausstattung: "felgen",
      felgen: "farbe",
      farbe: "motor",
      motor: "fahrzeug",
    };
    if (activeTab !== "fahrzeug") {
      setActiveTab(prevTabs[activeTab as keyof typeof prevTabs]);
    }
  };

  return (
    <Layout>
      <div className="container mx-auto py-8 px-4">
        <h1 className="text-3xl font-bold mb-8">Fahrzeug-Konfigurator</h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
              <KonfiguratorTabs activeTab={activeTab} onTabChange={handleTabChange} isTabEnabled={isTabEnabled} />
              <TabsContent value="fahrzeug" className="space-y-6">
                <FahrzeugTab onNext={handleNextTab} />
                <NavigationButtons
                  showPrevious={false}
                  showNext={true}
                  onNext={handleNextTab}
                  nextDisabled={!aktuellesFahrzeug}
                  onPrevious={() => {}}
                />
              </TabsContent>
              <TabsContent value="motor" className="space-y-6">
                <MotorTab />
                <NavigationButtons
                  showPrevious={true}
                  showNext={true}
                  onPrevious={handlePreviousTab}
                  onNext={handleNextTab}
                  nextDisabled={!aktuellerMotor}
                />
              </TabsContent>
              <TabsContent value="farbe" className="space-y-6">
                <FarbeTab />
                <NavigationButtons
                  showPrevious={true}
                  showNext={true}
                  onPrevious={handlePreviousTab}
                  onNext={handleNextTab}
                  nextDisabled={!aktuelleFarbe}
                />
              </TabsContent>
              <TabsContent value="felgen" className="space-y-6">
                <FelgenTab />
                <NavigationButtons
                  showPrevious={true}
                  showNext={true}
                  onPrevious={handlePreviousTab}
                  onNext={handleNextTab}
                  nextDisabled={!aktuelleFelgen}
                />
              </TabsContent>
              <TabsContent value="ausstattung" className="space-y-6">
                <AusstattungTab />
                <NavigationButtons
                  showPrevious={true}
                  showNext={true}
                  onPrevious={handlePreviousTab}
                  onNext={handleNextTab}
                  nextText="Weiter zur Zusammenfassung"
                />
              </TabsContent>
              <TabsContent value="zusammenfassung" className="space-y-6">
                <ZusammenfassungTab onPrevious={handlePreviousTab} />
              </TabsContent>
            </Tabs>
          </div>
          <div className="lg:col-span-1">
            <div className="sticky top-24">
              <h2 className="text-xl font-semibold mb-4">Ihre Konfiguration</h2>
              <KonfigurationsUebersicht />
              {activeTab !== "zusammenfassung" && isTabEnabled("zusammenfassung") && (
                <div className="mt-6 text-right">
                  <Button
                    onClick={() => setActiveTab("zusammenfassung")}
                    variant="outline"
                    className="flex items-center ml-auto"
                  >
                    Zur Zusammenfassung
                    <ChevronRight className="ml-1 h-4 w-4" />
                  </Button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}

// app/login/page.tsx

import Layout from "@/components/Layout";
import { LoginForm } from "@/components/login-form";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Anmelden | Fahrzeugkonfigurator",
  description:
    "Melden Sie sich an, um Ihre Fahrzeugkonfigurationen zu verwalten",
};

export default function LoginPage() {
  return (
    <Layout>
      <div className="container mx-auto py-8 px-4">
        <div className="mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]">
          <div className="flex flex-col space-y-2 text-center">
            <h1 className="text-2xl font-semibold tracking-tight">Anmelden</h1>
            <p className="text-sm text-muted-foreground">
              Geben Sie Ihre E-Mail-Adresse und Ihr Passwort ein, um sich
              anzumelden
            </p>
          </div>
          <LoginForm />
          <p className="px-8 text-center text-sm text-muted-foreground">
            <a
              href="/registrieren"
              className="hover:text-brand underline underline-offset-4"
            >
              Noch kein Konto? Registrieren
            </a>
          </p>
        </div>
      </div>
    </Layout>
  );
}


// app/profil/page.tsx

import { ProfileForm } from "@/components/profile-form";
import { prisma } from "@/lib/prisma";
import { authOptions } from "@/lib/auth";
import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { Metadata } from "next";
import Layout from "@/components/Layout";

export const metadata: Metadata = {
  title: "Mein Profil | Fahrzeugkonfigurator",
  description: "Verwalten Sie Ihre persönlichen Daten",
};

export default async function ProfilePage() {
  const session = await getServerSession(authOptions);

  if (!session || !session.user) {
    redirect("/login");
  }

  const user = await prisma.user.findUnique({
    where: {
      id: session.user.id,
    },
  });

  if (!user) {
    redirect("/login");
  }

  return (
    <Layout>
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col space-y-6">
          <div className="space-y-2">
            <h1 className="text-3xl font-display font-bold tracking-tight text-foreground">
              Mein Profil
            </h1>
            <p className="text-muted-foreground">
              Verwalten Sie Ihre persönlichen Daten und Einstellungen.
            </p>
          </div>
          <ProfileForm user={user} />
        </div>
      </div>
    </Layout>
  );
}

// app/registrieren/page.tsx

import Layout from "@/components/Layout";
import { RegisterForm } from "@/components/register-form";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Registrieren | Fahrzeugkonfigurator",
  description:
    "Erstellen Sie ein Konto, um Ihre Fahrzeugkonfigurationen zu speichern",
};

export default function RegisterPage() {
  return (
    <Layout>
      <div className="container mx-auto py-8 px-4">
        <div className="mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]">
          <div className="flex flex-col space-y-2 text-center">
            <h1 className="text-2xl font-semibold tracking-tight">
              Konto erstellen
            </h1>
            <p className="text-sm text-muted-foreground">
              Geben Sie Ihre Daten ein, um ein Konto zu erstellen
            </p>
          </div>
          <RegisterForm />
          <p className="px-8 text-center text-sm text-muted-foreground">
            <a
              href="/login"
              className="hover:text-brand underline underline-offset-4"
            >
              Bereits ein Konto? Anmelden
            </a>
          </p>
        </div>
      </div>
    </Layout>
  );
}

// app/verwaltung/page.tsx

"use client";
import React, { useState } from 'react';
import Layout from '@/components/Layout';
import BestellungsList from "@/components/verwaltung/BestellungsList";
import KonfigurationsList from "@/components/verwaltung/KonfigurationsList";
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ShoppingCart, Settings } from 'lucide-react';

const Kaufverwaltung: React.FC = () => {
  const [activeTab, setActiveTab] = useState<string>('konfigurationen');

  return (
    <Layout>
      <div className="container mx-auto px-4 py-8 mt-16">
        <div className="flex flex-col space-y-6">
          <div>
            <h1 className="text-3xl font-display font-semibold">Kaufverwaltung</h1>
            <p className="text-muted-foreground mt-2">
              Verwalten Sie Ihre gespeicherten Konfigurationen und Bestellungen
            </p>
          </div>

          <Tabs
            defaultValue="konfigurationen"
            value={activeTab}
            onValueChange={setActiveTab}
            className="w-full"
          >
            <TabsList className="grid w-full grid-cols-2 mb-8">
              <TabsTrigger value="konfigurationen" className="flex items-center">
                <Settings className="mr-2 h-4 w-4" />
                Konfigurationen
              </TabsTrigger>
              <TabsTrigger value="bestellungen" className="flex items-center">
                <ShoppingCart className="mr-2 h-4 w-4" />
                Bestellungen
              </TabsTrigger>
            </TabsList>

            <TabsContent value="konfigurationen" className="mt-6">
              <KonfigurationsList />
            </TabsContent>

            <TabsContent value="bestellungen" className="mt-6">
              <BestellungsList />
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </Layout>
  );
};

export default Kaufverwaltung;


// components/FahrzeugCard.tsx

"use client";

import React from "react";
import { Fahrzeug } from "@/types/models";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { ArrowRight, Car, AlertTriangle, Check, Info } from "lucide-react";
import { Badge } from "@/components/ui/badge";

interface FahrzeugCardProps {
  fahrzeug: Fahrzeug;
  onConfigure: (fahrzeugId: string) => void;
}

const FahrzeugCard = ({ fahrzeug, onConfigure }: FahrzeugCardProps) => {
  const router = useRouter();

  const handleConfigure = () => {
    if (fahrzeug.verfuegbar) {
      onConfigure(fahrzeug.id);
      router.push(`/konfigurator/${fahrzeug.id}?tab=motor`);
    }
  };

  return (
    <div className="bg-card rounded-lg overflow-hidden border shadow-sm hover:shadow-md transition-all duration-300 flex flex-col h-full">
      <div className="relative h-48 overflow-hidden bg-muted ">
        <img
          src={fahrzeug.bildUrl}
          alt={`${fahrzeug.marke} ${fahrzeug.modell}`}
          className="w-full h-full object-cover transition-transform duration-500 hover:scale-105"
        />
        {!fahrzeug.verfuegbar && (
          <div className="absolute inset-0 bg-black/70 flex items-center justify-center">
            <div className="text-center px-4 py-2 rounded-md bg-black/40 backdrop-blur-sm">
              <AlertTriangle className="h-6 w-6 text-yellow-500 mx-auto mb-1" />
              <span className="text-white text-sm font-medium">
                Nicht verfügbar
              </span>
            </div>
          </div>
        )}
        <div className="absolute top-2 left-2">
          <Badge variant="secondary" className="font-medium">
            <Car className="h-3 w-3 mr-1" />
            {fahrzeug.marke}
          </Badge>
        </div>
      </div>
      <div className="p-4 flex-grow flex flex-col">
        <div className="flex justify-between items-start mb-2">
          <h3 className="text-lg font-medium">{fahrzeug.modell}</h3>
          <span className="font-semibold text-primary">
            {fahrzeug.basisPreis.toLocaleString("de-DE")} €
          </span>
        </div>
        <p className="text-sm text-muted-foreground mb-3 line-clamp-2 flex-grow">
          {fahrzeug.beschreibung}
        </p>
        <div className="flex items-center justify-between pt-3 border-t mt-2">
          <div className="flex items-center text-sm">
            {fahrzeug.verfuegbar ? (
              <>
                <Check className="h-4 w-4 text-primary mr-1" />
                <span className="text-muted-foreground">Verfügbar</span>
              </>
            ) : (
              <>
                <AlertTriangle className="h-4 w-4 text-yellow-500 mr-1" />
                <span className="text-muted-foreground">Nicht verfügbar</span>
              </>
            )}
          </div>
          <div className="flex gap-2 text-sm">
            <Link
              href={`/katalog/${fahrzeug.id}`}
              className="text-muted-foreground hover:text-foreground transition-colors px-2 py-1 flex items-center gap-1"
            >
              <Info size={14} />
              <span>Details</span>
            </Link>

            {fahrzeug.verfuegbar && (
              <button
                onClick={handleConfigure}
                className="text-primary hover:text-primary/80 transition-colors font-medium flex items-center px-2 py-1"
              >
                <span className="mr-1">Konfigurieren</span>
                <ArrowRight size={14} />
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default FahrzeugCard;


// components/KonfigurationsUebersicht.tsx

"use client";

import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useAppContext } from "@/context/AppContext";
import { AlertCircle } from "lucide-react";

const KonfigurationsUebersicht = () => {
  const {
    aktuellesFahrzeug,
    aktuellerMotor,
    aktuelleFarbe,
    aktuelleFelgen,
    aktuelleAusstattungen,
    berechneGesamtpreis,
  } = useAppContext();

  if (!aktuellesFahrzeug) {
    return (
      <Card className="border shadow-sm">
        <CardContent className="p-4 flex flex-col items-center justify-center text-center h-48">
          <AlertCircle className="h-10 w-10 text-muted-foreground mb-2" />
          <h3 className="text-lg font-medium">Bitte wählen Sie ein Fahrzeug aus</h3>
          <p className="text-sm text-muted-foreground mt-1">
            Beginnen Sie mit der Auswahl eines Fahrzeugs
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="border shadow-sm">
      <CardContent className="p-4">
        <div className="flex flex-col gap-4">
          <div className="relative h-40 overflow-hidden bg-muted rounded-md">
            <img
              src={aktuellesFahrzeug.bildUrl}
              alt={`${aktuellesFahrzeug.marke} ${aktuellesFahrzeug.modell}`}
              className="w-full h-full object-cover"
            />
            {aktuelleFarbe && (
              <div
                className="absolute bottom-0 left-0 w-full h-2"
                style={{ backgroundColor: aktuelleFarbe.farbcode }}
              ></div>
            )}
          </div>

          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <h3 className="font-medium text-lg">
                {aktuellesFahrzeug.marke} {aktuellesFahrzeug.modell}
              </h3>
              <Badge variant="outline" className="font-normal">
                Basis: {aktuellesFahrzeug.basisPreis.toLocaleString("de-DE")} €
              </Badge>
            </div>

            {aktuellerMotor ? (
              <div className="flex justify-between items-center">
                <p className="text-sm">
                  <span className="font-medium">Motor:</span> {aktuellerMotor.name} (
                  {aktuellerMotor.ps} PS)
                </p>
                {aktuellerMotor.preis > 0 && (
                  <span className="text-sm text-muted-foreground">
                    +{aktuellerMotor.preis.toLocaleString("de-DE")} €
                  </span>
                )}
              </div>
            ) : (
              <p className="text-sm text-red-500 font-medium">Motor auswählen</p>
            )}

            {aktuelleFarbe ? (
              <div className="flex justify-between items-center">
                <div className="flex items-center text-sm">
                  <span className="font-medium mr-1">Farbe:</span>
                  <div
                    className="w-4 h-4 rounded-full ml-1 mr-1"
                    style={{ backgroundColor: aktuelleFarbe.farbcode }}
                  ></div>
                  <span>{aktuelleFarbe.name}</span>
                </div>
                {aktuelleFarbe.preis > 0 && (
                  <span className="text-sm text-muted-foreground">
                    +{aktuelleFarbe.preis.toLocaleString("de-DE")} €
                  </span>
                )}
              </div>
            ) : (
              <p className="text-sm text-red-500 font-medium">Farbe auswählen</p>
            )}

            {aktuelleFelgen ? (
              <div className="flex justify-between items-center">
                <p className="text-sm">
                  <span className="font-medium">Felgen:</span> {aktuelleFelgen.name}
                </p>
                {aktuelleFelgen.preis > 0 && (
                  <span className="text-sm text-muted-foreground">
                    +{aktuelleFelgen.preis.toLocaleString("de-DE")} €
                  </span>
                )}
              </div>
            ) : (
              <p className="text-sm text-red-500 font-medium">Felgen auswählen</p>
            )}

            {aktuelleAusstattungen.length > 0 && (
              <div>
                <p className="text-sm font-medium mb-1">Ausstattung:</p>
                <div className="flex flex-wrap gap-1 mt-1">
                  {aktuelleAusstattungen.map((item) => (
                    <Badge key={item.id} variant="secondary" className="text-xs">
                      {item.name}
                    </Badge>
                  ))}
                </div>
                <p className="text-xs text-right text-muted-foreground mt-1">
                  +{aktuelleAusstattungen.reduce((sum, item) => sum + item.preis, 0).toLocaleString("de-DE")} €
                </p>
              </div>
            )}
          </div>

          <div className="border-t pt-3 mt-2">
            <div className="flex justify-between items-center">
              <span className="font-medium">Gesamtpreis:</span>
              <span className="text-xl font-bold">
                {berechneGesamtpreis().toLocaleString("de-DE")} €
              </span>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default KonfigurationsUebersicht;

// components/Layout.tsx

import React, { ReactNode } from "react";
import Navigation from "./Navigation";
import Link from "next/link";
import { Car, Phone, Mail, MapPin, ChevronRight } from "lucide-react";

interface LayoutProps {
  children: ReactNode;
}

const Layout = ({ children }: LayoutProps) => {
  return (
    <div className="min-h-screen flex flex-col bg-background">
      <Navigation />
      <main className="flex-grow pt-16">{children}</main>
      <footer className="bg-card border-t py-10">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 rounded-md bg-primary flex items-center justify-center mr-2">
                  <Car className="h-4 w-4 text-white" />
                </div>
                <h3 className="font-semibold text-lg">AutoKonfigurator</h3>
              </div>
              <p className="text-sm text-muted-foreground mb-4">
                Ihr Partner für maßgeschneiderte Fahrzeugkonfigurationen seit 2023.
              </p>
              <div className="flex space-x-3">
                <a
                  href="#"
                  className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center hover:bg-primary hover:text-white transition-colors"
                >
                  <span className="sr-only">Facebook</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>
                  </svg>
                </a>
                <a
                  href="#"
                  className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center hover:bg-primary hover:text-white transition-colors"
                >
                  <span className="sr-only">Twitter</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path>
                  </svg>
                </a>
                <a
                  href="#"
                  className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center hover:bg-primary hover:text-white transition-colors"
                >
                  <span className="sr-only">Instagram</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect>
                    <path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path>
                    <line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line>
                  </svg>
                </a>
              </div>
            </div>
            <div>
              <h3 className="font-semibold text-base mb-4 pb-1 border-b border-border">
                Schnellzugriff
              </h3>
              <ul className="space-y-2 text-sm">
                <li>
                  <Link
                    href="/"
                    className="flex items-center hover:text-primary transition-colors"
                  >
                    <ChevronRight className="h-3 w-3 mr-1" />
                    <span>Startseite</span>
                  </Link>
                </li>
                <li>
                  <Link
                    href="/katalog"
                    className="flex items-center hover:text-primary transition-colors"
                  >
                    <ChevronRight className="h-3 w-3 mr-1" />
                    <span>Fahrzeugkatalog</span>
                  </Link>
                </li>
                <li>
                  <Link
                    href="/konfigurator"
                    className="flex items-center hover:text-primary transition-colors"
                  >
                    <ChevronRight className="h-3 w-3 mr-1" />
                    <span>Konfigurator</span>
                  </Link>
                </li>
                <li>
                  <Link
                    href="/verwaltung"
                    className="flex items-center hover:text-primary transition-colors"
                  >
                    <ChevronRight className="h-3 w-3 mr-1" />
                    <span>Kaufverwaltung</span>
                  </Link>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold text-base mb-4 pb-1 border-b border-border">
                Rechtliches
              </h3>
              <ul className="space-y-2 text-sm">
                <li>
                  <a
                    href="#"
                    className="flex items-center hover:text-primary transition-colors"
                  >
                    <ChevronRight className="h-3 w-3 mr-1" />
                    <span>Impressum</span>
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="flex items-center hover:text-primary transition-colors"
                  >
                    <ChevronRight className="h-3 w-3 mr-1" />
                    <span>Datenschutz</span>
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="flex items-center hover:text-primary transition-colors"
                  >
                    <ChevronRight className="h-3 w-3 mr-1" />
                    <span>AGB</span>
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="flex items-center hover:text-primary transition-colors"
                  >
                    <ChevronRight className="h-3 w-3 mr-1" />
                    <span>Widerrufsrecht</span>
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold text-base mb-4 pb-1 border-b border-border">
                Kontakt
              </h3>
              <address className="text-sm text-muted-foreground not-italic space-y-3">
                <p className="flex items-start">
                  <MapPin className="h-4 w-4 mt-0.5 mr-2 text-primary" />
                  <span>
                    AutoKonfigurator GmbH
                    <br />
                    Musterstraße 123
                    <br />
                    12345 Musterstadt
                  </span>
                </p>
                <p className="flex items-center">
                  <Phone className="h-4 w-4 mr-2 text-primary" />
                  <span>+49 (0) 123 456789</span>
                </p>
                <p className="flex items-center">
                  <Mail className="h-4 w-4 mr-2 text-primary" />
                  <a
                    href="mailto:info@autokonfigurator.de"
                    className="text-primary hover:underline"
                  >
                    info@autokonfigurator.de
                  </a>
                </p>
              </address>
            </div>
          </div>
          <div className="border-t mt-8 pt-6 text-center text-sm text-muted-foreground">
            <p>&copy; 2025 AutoKonfigurator GmbH. Alle Rechte vorbehalten.</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Layout;

// components/login-form.tsx

// components/login-form.tsx
"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";

const formSchema = z.object({
  email: z.string().email({ message: "Bitte geben Sie eine gültige E-Mail-Adresse ein" }),
  password: z.string().min(1, { message: "Bitte geben Sie Ihr Passwort ein" }),
});

export function LoginForm() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { email: "", password: "" },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    if (isLoading) return;
    setIsLoading(true);

    try {
      const result = await signIn("credentials", {
        email: values.email,
        password: values.password,
        redirect: false,
      });

      if (result?.error) {
        toast.error("Fehler bei der Anmeldung", {
          description: "E-Mail oder Passwort ist falsch",
        });
        return;
      }

      toast.success("Erfolgreich angemeldet", {
        description: "Sie werden weitergeleitet...",
      });
      router.push("/");
      router.refresh();
    } catch (error) {
      toast.error("Fehler", {
        description: "Ein unerwarteter Fehler ist aufgetreten",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>E-Mail</FormLabel>
              <FormControl>
                <Input placeholder="name@beispiel.de" disabled={isLoading} {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Passwort</FormLabel>
              <FormControl>
                <Input type="password" placeholder="********" disabled={isLoading} {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit" className="w-full" disabled={isLoading}>
          {isLoading ? "Anmeldung läuft..." : "Anmelden"}
        </Button>
      </form>
    </Form>
  );
}

// components/Navigation.tsx

"use client";

import { useState } from "react";
import { usePathname } from "next/navigation";
import { useSession, signOut } from "next-auth/react";
import Link from "next/link";
import {
  Menu,
  X,
  Car,
  Home,
  Settings,
  ShoppingCart,
  Users,
  ClipboardList,
  UserCircle,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

export default function Navigation() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const pathname = usePathname();
  const { data: session } = useSession();

  const isActive = (path: string) => {
    return pathname === path;
  };

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const verwaltungPath =
    session?.user?.role === "ADMIN"
      ? "/admin/bestellverwaltung"
      : "/verwaltung";
  const verwaltungText =
    session?.user?.role === "ADMIN" ? "Bestellverwaltung" : "Kaufverwaltung";
  const VerwaltungIcon =
    session?.user?.role === "ADMIN" ? ClipboardList : ShoppingCart;


  const getAvatarInitials = () => {
    if (session?.user?.firstName && session?.user?.lastName) {
      return (
        session.user.firstName.charAt(0) + session.user.lastName.charAt(0)
      );
    }

    else if (session?.user?.name) {
      return session.user.name
        .split(" ")
        .map((name) => name[0])
        .join("")
        .substring(0, 2);
    }
   
    return session?.user?.email?.charAt(0) || "U";
  };

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 bg-card border-b border-border shadow-sm">
      <div className="container mx-auto px-4 py-3">
        <div className="flex justify-between items-center">
          {/* Logo und Seitentitel */}
          <Link href="/" className="flex items-center space-x-2">
            <div className="w-9 h-9 rounded-md bg-primary flex items-center justify-center">
              <Car className="h-5 w-5 text-white" />
            </div>
            <span className="text-xl font-display font-semibold">
              Fahrzeugkonfigurator
            </span>
          </Link>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-6">
            <Link
              href="/"
              className={`px-3 py-2 rounded-md transition-colors flex items-center space-x-1 ${
                isActive("/")
                  ? "bg-secondary text-primary font-medium"
                  : "hover:bg-secondary/50"
              }`}
            >
              <Home className="h-4 w-4" />
              <span>Startseite</span>
            </Link>
            <Link
              href="/katalog"
              className={`px-3 py-2 rounded-md transition-colors flex items-center space-x-1 ${
                isActive("/katalog")
                  ? "bg-secondary text-primary font-medium"
                  : "hover:bg-secondary/50"
              }`}
            >
              <Car className="h-4 w-4" />
              <span>Fahrzeugkatalog</span>
            </Link>
            <Link
              href="/konfigurator"
              className={`px-3 py-2 rounded-md transition-colors flex items-center space-x-1 ${
                isActive("/konfigurator")
                  ? "bg-secondary text-primary font-medium"
                  : "hover:bg-secondary/50"
              }`}
            >
              <Settings className="h-4 w-4" />
              <span>Konfigurator</span>
            </Link>
            {session && (
              <Link
                href={verwaltungPath}
                className={`px-3 py-2 rounded-md transition-colors flex items-center space-x-1 ${
                  isActive(verwaltungPath)
                    ? "bg-secondary text-primary font-medium"
                    : "hover:bg-secondary/50"
                }`}
              >
                <VerwaltungIcon className="h-4 w-4" />
                <span>{verwaltungText}</span>
              </Link>
            )}
            {session?.user?.role === "ADMIN" && (
              <Link
                href="/admin/kunden"
                className={`px-3 py-2 rounded-md transition-colors flex items-center space-x-1 ${
                  isActive("/admin/kunden")
                    ? "bg-secondary text-primary font-medium"
                    : "hover:bg-secondary/50"
                }`}
              >
                <Users className="h-4 w-4" />
                <span>Kundenverwaltung</span>
              </Link>
            )}
            <div>
              {session ? (
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <button className="relative h-8 w-8 rounded-full flex items-center justify-center mx-auto">
                      <Avatar>
                        <AvatarFallback className="bg-primary/10 text-primary font-medium">
                          {getAvatarInitials()}
                        </AvatarFallback>
                      </Avatar>
                    </button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="center">
                    <DropdownMenuItem asChild>
                      <Link href="/profil" onClick={toggleMenu}>
                        Mein Profil
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      onClick={() => {
                        signOut({ callbackUrl: "/login" });
                        toggleMenu();
                      }}
                    >
                      Abmelden
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              ) : (
                <Link href="/login" onClick={toggleMenu}>
                  <button className="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary/90 transition-colors w-full flex items-center justify-center space-x-2">
                    <UserCircle className="h-4 w-4" />
                    <span>Anmelden</span>
                  </button>
                </Link>
              )}
            </div>
          </div>

          {/* Mobile Menu Button */}
          <button className="md:hidden p-2" onClick={toggleMenu}>
            {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
          </button>
        </div>
      </div>

      {/* Mobile Navigation */}
      {isMenuOpen && (
        <div className="md:hidden bg-card border-t border-border">
          <div className="container mx-auto px-4 py-2 flex flex-col space-y-1">
            <Link
              href="/"
              className={`py-2 px-3 rounded-md flex items-center space-x-2 ${
                isActive("/") ? "bg-secondary text-primary font-medium" : ""
              }`}
              onClick={toggleMenu}
            >
              <Home className="h-5 w-5" />
              <span>Startseite</span>
            </Link>
            <Link
              href="/katalog"
              className={`py-2 px-3 rounded-md flex items-center space-x-2 ${
                isActive("/katalog")
                  ? "bg-secondary text-primary font-medium"
                  : ""
              }`}
              onClick={toggleMenu}
            >
              <Car className="h-5 w-5" />
              <span>Fahrzeugkatalog</span>
            </Link>
            <Link
              href="/konfigurator"
              className={`py-2 px-3 rounded-md flex items-center space-x-2 ${
                isActive("/konfigurator")
                  ? "bg-secondary text-primary font-medium"
                  : ""
              }`}
              onClick={toggleMenu}
            >
              <Settings className="h-5 w-5" />
              <span>Konfigurator</span>
            </Link>
            {session && (
              <Link
                href={verwaltungPath}
                className={`py-2 px-3 rounded-md flex items-center space-x-2 ${
                  isActive(verwaltungPath)
                    ? "bg-secondary text-primary font-medium"
                    : ""
                }`}
                onClick={toggleMenu}
              >
                <VerwaltungIcon className="h-5 w-5" />
                <span>{verwaltungText}</span>
              </Link>
            )}
            {session?.user?.role === "ADMIN" && (
              <Link
                href="/admin/kunden"
                className={`py-2 px-3 rounded-md flex items-center space-x-2 ${
                  isActive("/admin/kunden")
                    ? "bg-secondary text-primary font-medium"
                    : ""
                }`}
                onClick={toggleMenu}
              >
                <Users className="h-5 w-5" />
                <span>Kundenverwaltung</span>
              </Link>
            )}
            <div className="pt-2 mt-2 border-t border-border">
              {session ? (
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <button className="relative h-8 w-8 rounded-full flex items-center justify-center mx-auto">
                      <Avatar>
                        <AvatarFallback className="bg-primary/10 text-primary font-medium">
                          {getAvatarInitials()}
                        </AvatarFallback>
                      </Avatar>
                    </button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="center">
                    <DropdownMenuItem asChild>
                      <Link href="/profil" onClick={toggleMenu}>
                        Mein Profil
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      onClick={() => {
                        signOut({ callbackUrl: "/login" });
                        toggleMenu();
                      }}
                    >
                      Abmelden
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              ) : (
                <Link href="/login" onClick={toggleMenu}>
                  <button className="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary/90 transition-colors w-full flex items-center justify-center space-x-2">
                    <UserCircle className="h-4 w-4" />
                    <span>Anmelden</span>
                  </button>
                </Link>
              )}
            </div>
          </div>
        </div>
      )}
    </nav>
  );
}

// components/profile-form.tsx

"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToastContext } from "@/context/ToastContext"; // Замена sonnerToast

const profileFormSchema = z.object({
  firstName: z.string().min(2, {
    message: "Der Vorname muss mindestens 2 Zeichen lang sein.",
  }),
  lastName: z.string().min(2, {
    message: "Der Nachname muss mindestens 2 Zeichen lang sein.",
  }),
  email: z.string().email({
    message: "Bitte geben Sie eine gültige E-Mail-Adresse ein.",
  }),
});

const addressFormSchema = z.object({
  street: z.string().min(2, {
    message: "Bitte geben Sie eine gültige Straße ein.",
  }),
  houseNumber: z.string().min(1, {
    message: "Bitte geben Sie eine gültige Hausnummer ein.",
  }),
  postalCode: z.string().min(5, {
    message: "Bitte geben Sie eine gültige Postleitzahl ein.",
  }),
  city: z.string().min(2, {
    message: "Bitte geben Sie eine gültige Stadt ein.",
  }),
});

const passwordFormSchema = z.object({
  currentPassword: z.string().min(1, {
    message: "Bitte geben Sie Ihr aktuelles Passwort ein.",
  }),
  newPassword: z.string().min(8, {
    message: "Das neue Passwort muss mindestens 8 Zeichen lang sein.",
  }),
  confirmPassword: z.string().min(8, {
    message: "Bitte bestätigen Sie Ihr neues Passwort.",
  }),
}).refine((data) => data.newPassword === data.confirmPassword, {
  message: "Die Passwörter stimmen nicht überein.",
  path: ["confirmPassword"],
});

interface ProfileFormProps {
  user: {
    id: string;
    firstName: string | null; // Обновлено с name на firstName
    lastName: string | null;  // Добавлено lastName
    email: string;
    street: string | null;
    houseNumber: string | null;
    postalCode: string | null;
    city: string | null;
    createdAt: Date;
  };
}

export function ProfileForm({ user }: ProfileFormProps) {
  const { showToast } = useToastContext(); // Используем общую систему уведомлений
  const [isProfileLoading, setIsProfileLoading] = useState(false);
  const [isAddressLoading, setIsAddressLoading] = useState(false);
  const [isPasswordLoading, setIsPasswordLoading] = useState(false);

  const profileForm = useForm<z.infer<typeof profileFormSchema>>({
    resolver: zodResolver(profileFormSchema),
    defaultValues: {
      firstName: user.firstName || "",
      lastName: user.lastName || "",
      email: user.email || "",
    },
  });

  const addressForm = useForm<z.infer<typeof addressFormSchema>>({
    resolver: zodResolver(addressFormSchema),
    defaultValues: {
      street: user.street || "",
      houseNumber: user.houseNumber || "",
      postalCode: user.postalCode || "",
      city: user.city || "",
    },
  });

  const passwordForm = useForm<z.infer<typeof passwordFormSchema>>({
    resolver: zodResolver(passwordFormSchema),
    defaultValues: {
      currentPassword: "",
      newPassword: "",
      confirmPassword: "",
    },
  });

  async function onProfileSubmit(values: z.infer<typeof profileFormSchema>) {
    setIsProfileLoading(true);

    try {
      const response = await fetch("/api/profil", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Fehler beim Aktualisieren des Profils");
      }

      showToast("Profil aktualisiert", "success", {
        description: "Ihre Profildaten wurden erfolgreich aktualisiert.",
      });
    } catch (error) {
      showToast("Fehler", "error", {
        description: error instanceof Error ? error.message : "Ein unbekannter Fehler ist aufgetreten",
      });
    } finally {
      setIsProfileLoading(false);
    }
  }

  async function onAddressSubmit(values: z.infer<typeof addressFormSchema>) {
    setIsAddressLoading(true);

    try {
      const response = await fetch("/api/profil/address", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Fehler beim Aktualisieren der Adresse");
      }

      showToast("Adresse aktualisiert", "success", {
        description: "Ihre Adressdaten wurden erfolgreich aktualisiert.",
      });
    } catch (error) {
      showToast("Fehler", "error", {
        description: error instanceof Error ? error.message : "Ein unbekannter Fehler ist aufgetreten",
      });
    } finally {
      setIsAddressLoading(false);
    }
  }

  async function onPasswordSubmit(values: z.infer<typeof passwordFormSchema>) {
    setIsPasswordLoading(true);

    try {
      const response = await fetch("/api/profil/password", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Fehler beim Ändern des Passworts");
      }

      showToast("Passwort geändert", "success", {
        description: "Ihr Passwort wurde erfolgreich geändert.",
      });

      passwordForm.reset({
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
      });
    } catch (error) {
      showToast("Fehler", "error", {
        description: error instanceof Error ? error.message : "Ein unbekannter Fehler ist aufgetreten",
      });
    } finally {
      setIsPasswordLoading(false);
    }
  }

  return (
    <Tabs defaultValue="profile" className="w-full">
      <TabsList className="grid w-full grid-cols-3 bg-muted rounded-md p-1">
        <TabsTrigger
          value="profile"
          className="data-[state=active]:bg-card data-[state=active]:text-primary rounded-md transition-colors"
        >
          Profil
        </TabsTrigger>
        <TabsTrigger
          value="address"
          className="data-[state=active]:bg-card data-[state=active]:text-primary rounded-md transition-colors"
        >
          Adresse
        </TabsTrigger>
        <TabsTrigger
          value="password"
          className="data-[state=active]:bg-card data-[state=active]:text-primary rounded-md transition-colors"
        >
          Passwort
        </TabsTrigger>
      </TabsList>

      <TabsContent value="profile" className="mt-6">
        <Card className="bg-card border-border shadow-sm">
          <CardHeader>
            <CardTitle className="text-2xl font-display font-semibold text-foreground">
              Profil
            </CardTitle>
            <CardDescription className="text-muted-foreground">
              Verwalten Sie Ihre persönlichen Daten.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...profileForm}>
              <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={profileForm.control}
                    name="firstName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-foreground">Vorname</FormLabel>
                        <FormControl>
                          <Input
                            className="bg-input border-border text-foreground"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={profileForm.control}
                    name="lastName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-foreground">Nachname</FormLabel>
                        <FormControl>
                          <Input
                            className="bg-input border-border text-foreground"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <FormField
                  control={profileForm.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-foreground">E-Mail</FormLabel>
                      <FormControl>
                        <Input
                          className="bg-input border-border text-foreground"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button
                  type="submit"
                  disabled={isProfileLoading}
                  className="bg-primary text-white hover:bg-primary/90"
                >
                  {isProfileLoading ? "Wird gespeichert..." : "Speichern"}
                </Button>
              </form>
            </Form>
          </CardContent>
        </Card>
      </TabsContent>

      <TabsContent value="address" className="mt-6">
        <Card className="bg-card border-border shadow-sm">
          <CardHeader>
            <CardTitle className="text-2xl font-display font-semibold text-foreground">
              Adresse
            </CardTitle>
            <CardDescription className="text-muted-foreground">
              Verwalten Sie Ihre Adressdaten.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...addressForm}>
              <form onSubmit={addressForm.handleSubmit(onAddressSubmit)} className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={addressForm.control}
                    name="street"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-foreground">Straße</FormLabel>
                        <FormControl>
                          <Input
                            className="bg-input border-border text-foreground"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={addressForm.control}
                    name="houseNumber"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-foreground">Hausnummer</FormLabel>
                        <FormControl>
                          <Input
                            className="bg-input border-border text-foreground"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={addressForm.control}
                    name="postalCode"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-foreground">PLZ</FormLabel>
                        <FormControl>
                          <Input
                            className="bg-input border-border text-foreground"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={addressForm.control}
                    name="city"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-foreground">Stadt</FormLabel>
                        <FormControl>
                          <Input
                            className="bg-input border-border text-foreground"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <Button
                  type="submit"
                  disabled={isAddressLoading}
                  className="bg-primary text-white hover:bg-primary/90"
                >
                  {isAddressLoading ? "Wird gespeichert..." : "Speichern"}
                </Button>
              </form>
            </Form>
          </CardContent>
        </Card>
      </TabsContent>

      <TabsContent value="password" className="mt-6">
        <Card className="bg-card border-border shadow-sm">
          <CardHeader>
            <CardTitle className="text-2xl font-display font-semibold text-foreground">
              Passwort ändern
            </CardTitle>
            <CardDescription className="text-muted-foreground">
              Ändern Sie Ihr Passwort.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...passwordForm}>
              <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className="space-y-6">
                <FormField
                  control={passwordForm.control}
                  name="currentPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-foreground">Aktuelles Passwort</FormLabel>
                      <FormControl>
                        <Input
                          type="password"
                          className="bg-input border-border text-foreground"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={passwordForm.control}
                  name="newPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-foreground">Neues Passwort</FormLabel>
                      <FormControl>
                        <Input
                          type="password"
                          className="bg-input border-border text-foreground"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={passwordForm.control}
                  name="confirmPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-foreground">Passwort bestätigen</FormLabel>
                      <FormControl>
                        <Input
                          type="password"
                          className="bg-input border-border text-foreground"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button
                  type="submit"
                  disabled={isPasswordLoading}
                  className="bg-primary text-white hover:bg-primary/90"
                >
                  {isPasswordLoading ? "Wird gespeichert..." : "Passwort ändern"}
                </Button>
              </form>
            </Form>
          </CardContent>
        </Card>
      </TabsContent>
    </Tabs>
  );
}

// components/register-form.tsx

"use client";

import * as React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useToastContext } from "@/context/ToastContext";

const formSchema = z.object({
  firstName: z.string().min(2, {
    message: "Der Vorname muss mindestens 2 Zeichen lang sein.",
  }),
  lastName: z.string().min(2, {
    message: "Der Nachname muss mindestens 2 Zeichen lang sein.",
  }),
  email: z.string().email({
    message: "Bitte geben Sie eine gültige E-Mail-Adresse ein.",
  }),
  password: z.string().min(8, {
    message: "Das Passwort muss mindestens 8 Zeichen lang sein.",
  }),
  street: z.string().min(2, {
    message: "Bitte geben Sie eine gültige Straße ein.",
  }),
  houseNumber: z.string().min(1, {
    message: "Bitte geben Sie eine gültige Hausnummer ein.",
  }),
  postalCode: z.string().min(5, {
    message: "Bitte geben Sie eine gültige Postleitzahl ein.",
  }),
  city: z.string().min(2, {
    message: "Bitte geben Sie eine gültige Stadt ein.",
  }),
});

export function RegisterForm() {
  const router = useRouter();
  const { showToast } = useToastContext();
  const [isLoading, setIsLoading] = React.useState<boolean>(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      password: "",
      street: "",
      houseNumber: "",
      postalCode: "",
      city: "",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);

    try {
      const response = await fetch("/api/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Registrierung fehlgeschlagen");
      }

      showToast("Konto erstellt: Sie können sich jetzt anmelden.", "success");

      router.push("/login");
    } catch (error) {
      showToast(
        `Fehler bei der Registrierung: ${
          error instanceof Error ? error.message : "Ein unbekannter Fehler ist aufgetreten"
        }`,
        "error"
      );
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="firstName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Vorname</FormLabel>
                <FormControl>
                  <Input placeholder="Max" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="lastName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Nachname</FormLabel>
                <FormControl>
                  <Input placeholder="Mustermann" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>E-Mail</FormLabel>
              <FormControl>
                <Input placeholder="name@beispiel.de" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Passwort</FormLabel>
              <FormControl>
                <Input type="password" placeholder="********" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="street"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Straße</FormLabel>
                <FormControl>
                  <Input placeholder="Musterstraße" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="houseNumber"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Hausnummer</FormLabel>
                <FormControl>
                  <Input placeholder="123" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="postalCode"
            render={({ field }) => (
              <FormItem>
                <FormLabel>PLZ</FormLabel>
                <FormControl>
                  <Input placeholder="12345" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="city"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Stadt</FormLabel>
                <FormControl>
                  <Input placeholder="Musterstadt" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <Button type="submit" className="w-full" disabled={isLoading}>
          {isLoading ? "Registrierung läuft..." : "Registrieren"}
        </Button>
      </form>
    </Form>
  );
}

// components/admin/Bestellverwaltung.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  AlertTriangle,
  FileText,
  Truck,
  CheckCircle,
  Clock,
  Trash,
} from "lucide-react";
import { useToastContext } from "@/context/ToastContext"; // ToastContext importieren

type BestellungStatus =
  | "Neu"
  | "Bestätigt"
  | "In Produktion"
  | "Fertig"
  | "Ausgeliefert";

const statusConfig: Record<
  BestellungStatus,
  {
    icon: React.ReactNode;
    color:
      | "default"
      | "secondary"
      | "primary"
      | "destructive"
      | "outline"
      | null;
    background: string;
  }
> = {
  Neu: {
    icon: <Clock className="h-4 w-4 mr-1" />,
    color: "secondary",
    background: "bg-secondary/20",
  },
  Bestätigt: {
    icon: <FileText className="h-4 w-4 mr-1" />,
    color: "primary",
    background: "bg-primary/10",
  },
  "In Produktion": {
    icon: <Truck className="h-4 w-4 mr-1" />,
    color: "primary",
    background: "bg-primary/20",
  },
  Fertig: {
    icon: <CheckCircle className="h-4 w-4 mr-1" />,
    color: "text-emerald-800",
    background: "bg-emerald-200 hover:bg-emerald-200",
  },
  Ausgeliefert: {
    icon: <CheckCircle className="h-4 w-4 mr-1" />,
    color: "text-emerald-800",
    background: "bg-emerald-100 hover:bg-emerald-100",
  },
};

export default function Bestellverwaltung() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [searchTerm, setSearchTerm] = useState("");
  const [bestellungen, setBestellungen] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const { showToast } = useToastContext(); // ToastContext verwenden

  useEffect(() => {
    if (status === "loading") return;
    if (!session || session.user.role !== "ADMIN") {
      router.push("/");
      return;
    }

    const fetchBestellungen = async () => {
      setIsLoading(true);
      try {
        const response = await fetch("/api/admin/bestellungen", {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });

        if (!response.ok) {
          throw new Error("Fehler beim Laden der Bestellungen");
        }

        const data = await response.json();
        setBestellungen(data.bestellungen || []);
      } catch (error) {
        showToast("Fehler beim Laden der Bestellungen", "error", {
          description:
            error instanceof Error ? error.message : "Unbekannter Fehler",
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchBestellungen();
  }, [session, status, router, showToast]);

  const handleStatusUpdate = async (
    id: string,
    newStatus: BestellungStatus
  ) => {
    try {
      const response = await fetch(`/api/bestellungen/update/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) {
        throw new Error("Fehler beim Aktualisieren des Status");
      }

      setBestellungen((prev) =>
        prev.map((bestellung) =>
          bestellung.id === id
            ? { ...bestellung, status: newStatus }
            : bestellung
        )
      );
      showToast(`Status auf "${newStatus}" geändert`, "success");
    } catch (error) {
      showToast("Fehler beim Aktualisieren des Status", "error", {
        description:
          error instanceof Error ? error.message : "Unbekannter Fehler",
      });
    }
  };

  const handleDeleteBestellung = async (id: string) => {
    if (!confirm("Möchten Sie diese Bestellung wirklich löschen?")) return;

    try {
      const response = await fetch("/api/admin/bestellungen/delete", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Fehler beim Löschen");
      }

      setBestellungen((prev) => prev.filter((b) => b.id !== id));
      showToast("Bestellung erfolgreich gelöscht", "success");
    } catch (error) {
      showToast("Fehler beim Löschen der Bestellung", "error", {
        description:
          error instanceof Error ? error.message : "Unbekannter Fehler",
      });
    }
  };

  const filteredBestellungen = bestellungen.filter(
    (bestellung) =>
      bestellung.fahrzeugName
        .toLowerCase()
        .includes(searchTerm.toLowerCase()) ||
      bestellung.userName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const formatCurrency = (value: number): string => {
    return `${value.toLocaleString("de-DE")} €`;
  };

  if (isLoading) {
    return <div>Lade Bestellungen...</div>;
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="space-y-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <h2 className="text-2xl font-display font-medium">
            Bestellverwaltung
          </h2>
          <div className="relative w-full sm:w-64">
            <Input
              placeholder="Nach Fahrzeug oder Nutzer suchen..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full"
            />
          </div>
        </div>

        {filteredBestellungen.length === 0 ? (
          <Card className="border-dashed border-2">
            <CardContent className="pt-6 text-center">
              <div className="flex justify-center mb-4">
                <AlertTriangle className="h-12 w-12 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium mb-2">
                Keine Bestellungen gefunden
              </h3>
              <p className="text-muted-foreground mb-4">
                Es gibt keine Bestellungen oder Ihre Suche ergab keine Treffer.
              </p>
            </CardContent>
          </Card>
        ) : (
          <div className="space-y-4">
            {filteredBestellungen.map((bestellung) => {
              const status = bestellung.status as BestellungStatus;
              const { icon, color, background } =
                statusConfig[status] || statusConfig["Neu"];

              return (
                <Card key={bestellung.id} className="animate-fade-in">
                  <CardHeader>
                    <div className="flex justify-between items-center">
                      <CardTitle>{bestellung.fahrzeugName}</CardTitle>
                      <Badge
                        variant={color || "default"}
                        className={`${background} px-3 py-1`}
                      >
                        {icon}
                        {status}
                      </Badge>
                    </div>
                    <CardDescription>
                      Bestellt von {bestellung.userName} am{" "}
                      {new Date(bestellung.bestellDatum).toLocaleDateString(
                        "de-DE"
                      )}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div>
                        <p className="text-sm text-muted-foreground">
                          Gesamtpreis
                        </p>
                        <p className="text-lg font-semibold">
                          {formatCurrency(bestellung.gesamtPreis)}
                        </p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">
                          Voraussichtliche Lieferung
                        </p>
                        <p className="text-lg font-semibold">
                          {bestellung.lieferDatum
                            ? new Date(
                                bestellung.lieferDatum
                              ).toLocaleDateString("de-DE")
                            : "Wird berechnet"}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="flex flex-wrap gap-2 justify-end">
                    {Object.keys(statusConfig).map((newStatus) => (
                      <Button
                        key={newStatus}
                        variant={status === newStatus ? "default" : "outline"}
                        size="sm"
                        onClick={() =>
                          handleStatusUpdate(
                            bestellung.id,
                            newStatus as BestellungStatus
                          )
                        }
                        disabled={status === newStatus}
                      >
                        {newStatus}
                      </Button>
                    ))}
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => handleDeleteBestellung(bestellung.id)}
                      className="bg-red-600 hover:bg-red-700 text-white"
                    >
                      <Trash className="h-4 w-4 mr-1" /> Löschen
                    </Button>
                  </CardFooter>
                </Card>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
}

// components/admin/Kundenverwaltung.tsx

"use client";

import React, { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, Eye, Edit, Trash2, Plus, Save, X } from "lucide-react";
import { useToastContext } from "@/context/ToastContext";

interface User {
  id: string;
  email: string;
  firstName: string; 
  lastName: string; 
  street: string;  
  houseNumber: string; 
  postalCode: string;  
  city: string;      
  orderCount: number;
  createdAt: string;
}

export default function Kundenverwaltung() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const { showToast } = useToastContext();
  const [searchTerm, setSearchTerm] = useState("");
  const [users, setUsers] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [editingUser, setEditingUser] = useState<Partial<User> | null>(null);
  const [addingNewUser, setAddingNewUser] = useState<Partial<User> | null>(null);

  useEffect(() => {
    if (status === "loading") return;
    if (!session || session.user.role !== "ADMIN") {
      router.push("/");
      return;
    }

    const fetchUsers = async () => {
      setIsLoading(true);
      try {
        const response = await fetch("/api/admin/kunden", {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });

        if (!response.ok) {
          throw new Error("Fehler beim Laden der Nutzer");
        }

        const data = await response.json();
        setUsers(data.users || []);
      } catch (error) {
        showToast("Fehler beim Laden der Nutzer", "error");
      } finally {
        setIsLoading(false);
      }
    };

    fetchUsers();
  }, [session, status, router, showToast]);

  const filteredUsers = users.filter((user) =>
    [user.firstName, user.lastName, user.email, user.city]
      .filter(Boolean)
      .some((field) => field.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const handleAddUser = () => {
    setAddingNewUser({
      firstName: "",
      lastName: "",
      email: "",
      street: "",
      houseNumber: "",
      postalCode: "",
      city: "",
    });
  };

  const handleEditUser = (user: User) => {
    setEditingUser({ ...user });
  };

  const handleDeleteUser = async (id: string) => {
    if (window.confirm("Sind Sie sicher, dass Sie diesen Nutzer löschen möchten?")) {
      try {
        const response = await fetch(`/api/admin/kunden/${id}`, {
          method: "DELETE",
          headers: { "Content-Type": "application/json" },
        });

        if (!response.ok) {
          throw new Error("Fehler beim Löschen des Nutzers");
        }

        setUsers(users.filter((u) => u.id !== id));
        showToast("Nutzer erfolgreich gelöscht", "success");
      } catch (error) {
        showToast("Fehler beim Löschen des Nutzers", "error");
      }
    }
  };

  const handleSaveNewUser = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!addingNewUser) return;

    const userData = {
      firstName: addingNewUser.firstName,
      lastName: addingNewUser.lastName,
      email: addingNewUser.email,
      street: addingNewUser.street,
      houseNumber: addingNewUser.houseNumber,
      postalCode: addingNewUser.postalCode,
      city: addingNewUser.city,
    };

    if (
      !userData.firstName ||
      !userData.lastName ||
      !userData.email ||
      !userData.street ||
      !userData.houseNumber ||
      !userData.postalCode ||
      !userData.city
    ) {
      showToast("Bitte füllen Sie alle Felder aus", "error");
      return;
    }

    try {
      const response = await fetch("/api/admin/kunden", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(userData),
      });

      if (!response.ok) {
        throw new Error("Fehler beim Erstellen des Nutzers");
      }

      const newUser = await response.json();
      setUsers([...users, newUser]);
      setAddingNewUser(null);

      showToast(
        <div>
          <p>Nutzer erfolgreich hinzugefügt!</p>
          <p>Generierter Passwort: <strong>{newUser.generatedPassword}</strong></p>
          <p>Bitte speichern Sie das Passwort, es wird nicht erneut angezeigt.</p>
        </div>,
        "success",
        { duration: 10000 }
      );
    } catch (error) {
      showToast("Fehler beim Erstellen des Nutzers", "error");
    }
  };

  const handleUpdateUser = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingUser || !editingUser.id) return;

    const userData = {
      firstName: editingUser.firstName,
      lastName: editingUser.lastName,
      email: editingUser.email,
      street: editingUser.street,
      houseNumber: editingUser.houseNumber,
      postalCode: editingUser.postalCode,
      city: editingUser.city,
    };

    if (
      !userData.firstName ||
      !userData.lastName ||
      !userData.email ||
      !userData.street ||
      !userData.houseNumber ||
      !userData.postalCode ||
      !userData.city
    ) {
      showToast("Bitte füllen Sie alle Felder aus", "error");
      return;
    }

    try {
      const response = await fetch(`/api/admin/kunden/${editingUser.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(userData),
      });

      if (!response.ok) {
        throw new Error("Fehler beim Aktualisieren des Nutzers");
      }

      const updatedUser = await response.json();
      setUsers(
        users.map((u) => (u.id === editingUser.id ? { ...u, ...updatedUser } : u))
      );
      setEditingUser(null);
      showToast("Nutzer erfolgreich aktualisiert", "success");
    } catch (error) {
      showToast("Fehler beim Aktualisieren des Nutzers", "error");
    }
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    setFormData: React.Dispatch<React.SetStateAction<Partial<User> | null>>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => (prev ? { ...prev, [name]: value } : null));
  };

  const formatAddress = (street: string, houseNumber: string) => {
    return `${street} ${houseNumber}`.trim();
  };

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="space-y-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <h2 className="text-2xl font-display font-medium">Kundenverwaltung</h2>
          <div className="flex gap-2">
            <div className="relative w-full sm:w-64">
              <Input
                placeholder="Suche nach Namen, E-Mail oder Stadt..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full"
              />
            </div>
            <Button variant="default" onClick={handleAddUser}>
              <Plus className="h-4 w-4 mr-2" />
              Neuer Nutzer
            </Button>
          </div>
        </div>

        {isLoading ? (
          <div>Lade Nutzer...</div>
        ) : filteredUsers.length === 0 && !addingNewUser ? (
          <Card className="border-dashed border-2">
            <CardContent className="pt-6 text-center">
              <div className="flex justify-center mb-4">
                <AlertTriangle className="h-12 w-12 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium mb-2">Keine Nutzer gefunden</h3>
              <p className="text-muted-foreground mb-4">
                Es gibt keine Nutzer oder Ihre Suche ergab keine Treffer.
              </p>
            </CardContent>
          </Card>
        ) : (
          <div className="overflow-x-auto bg-white rounded-lg shadow">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Name
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Kontakt
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Adresse
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Käufe
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Registriert am
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Aktionen
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {addingNewUser && (
                  <tr className="bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex gap-2">
                        <Input
                          name="firstName"
                          value={addingNewUser.firstName || ""}
                          onChange={(e) => handleInputChange(e, setAddingNewUser)}
                          placeholder="Vorname"
                          required
                          className="w-1/2"
                        />
                        <Input
                          name="lastName"
                          value={addingNewUser.lastName || ""}
                          onChange={(e) => handleInputChange(e, setAddingNewUser)}
                          placeholder="Nachname"
                          required
                          className="w-1/2"
                        />
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <Input
                        name="email"
                        type="email"
                        value={addingNewUser.email || ""}
                        onChange={(e) => handleInputChange(e, setAddingNewUser)}
                        placeholder="E-Mail"
                        required
                      />
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex gap-2">
                        <Input
                          name="street"
                          value={addingNewUser.street || ""}
                          onChange={(e) => handleInputChange(e, setAddingNewUser)}
                          placeholder="Straße"
                          required
                          className="w-2/3"
                        />
                        <Input
                          name="houseNumber"
                          value={addingNewUser.houseNumber || ""}
                          onChange={(e) => handleInputChange(e, setAddingNewUser)}
                          placeholder="Hausnummer"
                          required
                          className="w-1/3"
                        />
                      </div>
                      <div className="flex gap-2 mt-2">
                        <Input
                          name="postalCode"
                          value={addingNewUser.postalCode || ""}
                          onChange={(e) => handleInputChange(e, setAddingNewUser)}
                          placeholder="PLZ"
                          required
                          className="w-1/3"
                        />
                        <Input
                          name="city"
                          value={addingNewUser.city || ""}
                          onChange={(e) => handleInputChange(e, setAddingNewUser)}
                          placeholder="Ort"
                          required
                          className="w-2/3"
                        />
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <Badge className="bg-gray-100 text-gray-800 px-2 inline-flex text-xs leading-5 font-semibold rounded-full">
                        0
                      </Badge>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      -
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end space-x-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setAddingNewUser(null)}
                        >
                          <X className="h-4 w-4 text-gray-600" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={handleSaveNewUser}
                        >
                          <Save className="h-4 w-4 text-green-600" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                )}

                {filteredUsers.map((user) =>
                  editingUser && editingUser.id === user.id ? (
                    <tr key={user.id} className="bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex gap-2">
                          <Input
                            name="firstName"
                            value={editingUser.firstName || ""}
                            onChange={(e) => handleInputChange(e, setEditingUser)}
                            placeholder="Vorname"
                            required
                            className="w-1/2"
                          />
                          <Input
                            name="lastName"
                            value={editingUser.lastName || ""}
                            onChange={(e) => handleInputChange(e, setEditingUser)}
                            placeholder="Nachname"
                            required
                            className="w-1/2"
                          />
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <Input
                          name="email"
                          type="email"
                          value={editingUser.email || ""}
                          onChange={(e) => handleInputChange(e, setEditingUser)}
                          required
                        />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex gap-2">
                          <Input
                            name="street"
                            value={editingUser.street || ""}
                            onChange={(e) => handleInputChange(e, setEditingUser)}
                            placeholder="Straße"
                            required
                            className="w-2/3"
                          />
                          <Input
                            name="houseNumber"
                            value={editingUser.houseNumber || ""}
                            onChange={(e) => handleInputChange(e, setEditingUser)}
                            placeholder="Hausnummer"
                            required
                            className="w-1/3"
                          />
                        </div>
                        <div className="flex gap-2 mt-2">
                          <Input
                            name="postalCode"
                            value={editingUser.postalCode || ""}
                            onChange={(e) => handleInputChange(e, setEditingUser)}
                            placeholder="PLZ"
                            required
                            className="w-1/3"
                          />
                          <Input
                            name="city"
                            value={editingUser.city || ""}
                            onChange={(e) => handleInputChange(e, setEditingUser)}
                            placeholder="Ort"
                            required
                            className="w-2/3"
                          />
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <Badge
                          className={`${
                            user.orderCount > 0 ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"
                          } px-2 inline-flex text-xs leading-5 font-semibold rounded-full`}
                        >
                          {user.orderCount}
                        </Badge>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(user.createdAt).toLocaleDateString("de-DE")}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => setEditingUser(null)}
                          >
                            <X className="h-4 w-4 text-gray-600" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={handleUpdateUser}
                          >
                            <Save className="h-4 w-4 text-green-600" />
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ) : (
                    <tr key={user.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="h-10 w-10 bg-primary/10 rounded-full flex items-center justify-center mr-3">
                            <span className="text-primary font-medium">
                              {user.firstName.charAt(0) + user.lastName.charAt(0)}
                            </span>
                          </div>
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {`${user.firstName} ${user.lastName}`}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{user.email}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {formatAddress(user.street, user.houseNumber)}
                        </div>
                        <div className="text-sm text-gray-500">
                          {user.postalCode} {user.city}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <Badge
                          className={`${
                            user.orderCount > 0 ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"
                          } px-2 inline-flex text-xs leading-5 font-semibold rounded-full`}
                        >
                          {user.orderCount}
                        </Badge>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(user.createdAt).toLocaleDateString("de-DE")}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => router.push(`/admin/kunden/${user.id}`)}
                          >
                            <Eye className="h-4 w-4 text-blue-600" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleEditUser(user)}
                          >
                            <Edit className="h-4 w-4 text-indigo-600" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleDeleteUser(user.id)}
                          >
                            <Trash2 className="h-4 w-4 text-red-600" />
                          </Button>
                        </div>
                      </td>
                    </tr>
                  )
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

// components/konfigurator/AusstattungTab.tsx

"use client";

import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { useAppContext } from "@/context/AppContext";
import { Check } from "lucide-react";

const AusstattungTab: React.FC = () => {
  const { ausstattungen, aktuelleAusstattungen, toggleAusstattung } =
    useAppContext();

  // Gruppierung nach Kategorie
  const ausstattungNachKategorie = ausstattungen.reduce(
    (acc, ausstattung) => {
      if (!acc[ausstattung.kategorie]) {
        acc[ausstattung.kategorie] = [];
      }
      acc[ausstattung.kategorie].push(ausstattung);
      return acc;
    },
    {} as Record<string, typeof ausstattungen>
  );

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold mb-4">Wählen Sie Ihre Ausstattung</h2>
      {Object.entries(ausstattungNachKategorie).map(([kategorie, items]) => (
        <div key={kategorie} className="mb-6">
          <h3 className="text-xl font-medium mb-3">{kategorie}</h3>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            {items.map((ausstattung) => (
              <Card
                key={ausstattung.id}
                className={`cursor-pointer hover:border-primary transition-colors ${
                  aktuelleAusstattungen.some((a) => a.id === ausstattung.id)
                    ? "border-primary"
                    : ""
                }`}
                onClick={() => toggleAusstattung(ausstattung.id)}
              >
                <CardContent className="p-4">
                  <div className="flex justify-between">
                    <div>
                      <h4 className="font-semibold">{ausstattung.name}</h4>
                      <p className="text-sm text-gray-600">
                        {ausstattung.beschreibung}
                      </p>
                    </div>
                    <div className="flex items-start">
                      <span className="font-semibold mr-3">
                        + {ausstattung.preis.toLocaleString("de-DE")} €
                      </span>
                      {aktuelleAusstattungen.some(
                        (a) => a.id === ausstattung.id
                      ) && (
                        <div className="bg-primary text-white p-1 rounded-full">
                          <Check className="h-4 w-4" />
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      ))}
    </div>
  );
};

export default AusstattungTab;

// components/konfigurator/FahrzeugTab.tsx

"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { useAppContext } from "@/context/AppContext";
import { Check, Save, X, Trash } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { useToastContext } from "@/context/ToastContext"; // ToastContext anstelle von sonner

interface FahrzeugTabProps {
  onNext: () => void;
}

interface FahrzeugKategorie {
  id: string;
  name: string;
}

const FahrzeugTab: React.FC<FahrzeugTabProps> = ({ onNext }) => {
  const { fahrzeuge, aktuellesFahrzeug, setFahrzeug, isEditing } = useAppContext();
  const { showToast } = useToastContext(); // ToastContext verwenden
  const [editedFahrzeuge, setEditedFahrzeuge] = useState(fahrzeuge);
  const [editingData, setEditingData] = useState<
    Record<
      string,
      {
        marke?: string;
        modell?: string;
        basisPreis?: number;
        beschreibung?: string;
        baujahr?: number;
        verfuegbar?: boolean;
        kategorieId?: string;
        file?: File;
      }
    >
  >({});
  const [kategorien, setKategorien] = useState<FahrzeugKategorie[]>([]);

  // State für neue Fahrzeugdaten
  const [newFahrzeugData, setNewFahrzeugData] = useState({
    marke: "Neue Marke",
    modell: "Neues Modell",
    basisPreis: 0,
    bildUrl: "/placeholder.svg",
    beschreibung: "Neue Beschreibung",
    verfuegbar: true,
    kategorieId: "",
    baujahr: 2023,
  });

  // Kategorien abrufen
  useEffect(() => {
    const fetchKategorien = async () => {
      try {
        const response = await fetch("/api/admin/fahrzeugkategorien");
        if (response.ok) {
          const data = await response.json();
          setKategorien(data);
          if (data.length > 0 && !newFahrzeugData.kategorieId) {
            setNewFahrzeugData((prev) => ({
              ...prev,
              kategorieId: data[0].id,
            }));
          }
        } else {
          showToast("Fehler beim Laden der Fahrzeugkategorien", "error");
        }
      } catch (error) {
        console.error("Fehler beim Abrufen der Fahrzeugkategorien:", error);
        showToast("Fehler beim Laden der Fahrzeugkategorien", "error");
      }
    };

    if (isEditing) {
      fetchKategorien();
    }
  }, [isEditing, showToast]);

  // Änderungen lokal speichern (für bestehende Fahrzeuge)
  const handleInputChange = (
    id: string,
    field: string,
    value: string | number | boolean | File
  ) => {
    setEditingData((prev) => ({
      ...prev,
      [id]: {
        ...prev[id],
        [field]: value,
        ...(field !== "file" && { file: prev[id]?.file }),
      },
    }));
  };

  // Änderungen für neues Fahrzeug speichern
  const handleNewFahrzeugChange = (field: string, value: string | number) => {
    setNewFahrzeugData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  // Speichern der Änderungen (für bestehende Fahrzeuge)
  const handleSave = async (id: string) => {
    const data = editingData[id];
    if (!data || Object.keys(data).length === 0) {
      showToast("Keine Änderungen zum Speichern", "info");
      return;
    }

    const formData = new FormData();
    formData.append("id", id);
    if (data.marke) formData.append("marke", data.marke);
    if (data.modell) formData.append("modell", data.modell);
    if (data.basisPreis !== undefined && !isNaN(data.basisPreis)) {
      formData.append("basisPreis", data.basisPreis.toString());
    }
    if (data.beschreibung) formData.append("beschreibung", data.beschreibung);
    if (data.baujahr !== undefined) formData.append("baujahr", data.baujahr.toString());
    if (data.verfuegbar !== undefined) formData.append("verfuegbar", data.verfuegbar.toString());
    if (data.kategorieId) formData.append("kategorieId", data.kategorieId);
    if (data.file) formData.append("bildUrl", data.file);

    console.log("Sende FormData:", Object.fromEntries(formData));

    try {
      const response = await fetch(`/api/admin/fahrzeuge/update`, {
        method: "PUT",
        body: formData,
      });
      if (response.ok) {
        const updatedFahrzeug = await response.json();
        setEditedFahrzeuge((prev) =>
          prev.map((f) => (f.id === id ? updatedFahrzeug : f))
        );
        setEditingData((prev) => {
          const newData = { ...prev };
          delete newData[id];
          return newData;
        });
        showToast("Fahrzeug erfolgreich gespeichert", "success");
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || `Fehler beim Speichern (Status: ${response.status})`);
      }
    } catch (error) {
      console.error("Speicherfehler:", error);
      showToast("Fehler beim Speichern des Fahrzeugs", "error", {
        description: error instanceof Error ? error.message : "Unbekannter Fehler",
      });
    }
  };

  // Änderungen verwerfen (für bestehende Fahrzeuge)
  const handleCancel = (id: string) => {
    setEditingData((prev) => {
      const newData = { ...prev };
      delete newData[id];
      return newData;
    });
  };

  // Neues Fahrzeug hinzufügen
  const handleAddFahrzeug = async () => {
    try {
      const response = await fetch("/api/admin/fahrzeuge/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newFahrzeugData),
      });
      if (response.ok) {
        const createdFahrzeug = await response.json();
        setEditedFahrzeuge((prev) => [...prev, createdFahrzeug]);
        showToast("Neues Fahrzeug hinzugefügt", "success");
        setNewFahrzeugData({
          marke: "Neue Marke",
          modell: "Neues Modell",
          basisPreis: 0,
          bildUrl: "/placeholder.svg",
          beschreibung: "Neue Beschreibung",
          verfuegbar: true,
          kategorieId: kategorien[0]?.id || "",
          baujahr: 2023,
        });
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || "Fehler beim Hinzufügen");
      }
    } catch (error) {
      console.error("Fehler beim Hinzufügen:", error);
      showToast("Fehler beim Hinzufügen des Fahrzeugs", "error", {
        description: error instanceof Error ? error.message : "Unbekannter Fehler",
      });
    }
  };

  // Fahrzeug löschen
  const handleDeleteFahrzeug = async (id: string) => {
    if (!confirm("Möchten Sie dieses Fahrzeug wirklich löschen?")) return;

    try {
      const response = await fetch("/api/admin/fahrzeuge/delete", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id }),
      });
      if (response.ok) {
        setEditedFahrzeuge((prev) => prev.filter((f) => f.id !== id));
        showToast("Fahrzeug erfolgreich gelöscht", "success");
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || "Fehler beim Löschen");
      }
    } catch (error) {
      console.error("Fehler beim Löschen:", error);
      showToast("Fehler beim Löschen des Fahrzeugs", "error", {
        description: error instanceof Error ? error.message : "Unbekannter Fehler",
      });
    }
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold mb-4">Wählen Sie Ihr Fahrzeug</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {editedFahrzeuge.map((fahrzeug) => (
          <Card
            key={fahrzeug.id}
            className={`transition-colors ${
              aktuellesFahrzeug?.id === fahrzeug.id ? "border-primary" : ""
            } ${!isEditing ? "cursor-pointer hover:border-primary" : ""}`}
            onClick={() => !isEditing && setFahrzeug(fahrzeug.id)}
          >
            <CardContent className="p-0">
              <div className="relative h-48 overflow-hidden bg-muted rounded-t-lg">
                <img
                  src={
                    editingData[fahrzeug.id]?.file
                      ? URL.createObjectURL(editingData[fahrzeug.id].file)
                      : fahrzeug.bildUrl
                  }
                  alt={`${fahrzeug.marke} ${fahrzeug.modell}`}
                  className="w-full h-full object-cover"
                />
                {isEditing && (
                  <div className="absolute bottom-2 left-2">
                    <Label htmlFor={`file-${fahrzeug.id}`} className="cursor-pointer">
                      <Button variant="outline" size="sm" asChild>
                        <span>Bild ändern</span>
                      </Button>
                    </Label>
                    <input
                      id={`file-${fahrzeug.id}`}
                      type="file"
                      accept="image/*"
                      className="hidden"
                      onChange={(e) =>
                        handleInputChange(fahrzeug.id, "file", e.target.files?.[0]!)
                      }
                    />
                  </div>
                )}
                {!fahrzeug.verfuegbar && (
                  <div className="absolute inset-0 bg-black/60 flex items-center justify-center">
                    <span className="text-white text-lg font-semibold">
                      Nicht verfügbar
                    </span>
                  </div>
                )}
                {aktuellesFahrzeug?.id === fahrzeug.id && !isEditing && (
                  <div className="absolute top-2 right-2 bg-primary p-1 rounded-full">
                    <Check className="h-4 w-4 text-white" />
                  </div>
                )}
              </div>
              <div className="p-4">
                {isEditing ? (
                  <>
                    <Input
                      value={editingData[fahrzeug.id]?.modell ?? ""}
                      onChange={(e) =>
                        handleInputChange(fahrzeug.id, "modell", e.target.value)
                      }
                      placeholder={fahrzeug.modell}
                      className="font-semibold text-lg mb-2"
                    />
                    <Input
                      value={editingData[fahrzeug.id]?.marke ?? ""}
                      onChange={(e) =>
                        handleInputChange(fahrzeug.id, "marke", e.target.value)
                      }
                      placeholder={fahrzeug.marke}
                      className="text-sm text-gray-600 mb-2"
                    />
                    <Input
                      value={editingData[fahrzeug.id]?.basisPreis ?? ""}
                      onChange={(e) =>
                        handleInputChange(fahrzeug.id, "basisPreis", parseFloat(e.target.value))
                      }
                      placeholder={fahrzeug.basisPreis.toString()}
                      type="number"
                      className="font-semibold mb-2"
                    />
                    <Input
                      value={editingData[fahrzeug.id]?.beschreibung ?? ""}
                      onChange={(e) =>
                        handleInputChange(fahrzeug.id, "beschreibung", e.target.value)
                      }
                      placeholder={fahrzeug.beschreibung}
                      className="mb-2"
                    />
                    <Input
                      value={editingData[fahrzeug.id]?.baujahr ?? ""}
                      onChange={(e) =>
                        handleInputChange(fahrzeug.id, "baujahr", parseInt(e.target.value))
                      }
                      placeholder={fahrzeug.baujahr.toString()}
                      type="number"
                      className="mb-2"
                    />
                    <div className="flex items-center mb-2">
                      <Checkbox
                        id={`verfuegbar-${fahrzeug.id}`}
                        checked={
                          editingData[fahrzeug.id]?.verfuegbar ?? fahrzeug.verfuegbar
                        }
                        onCheckedChange={(checked) =>
                          handleInputChange(fahrzeug.id, "verfuegbar", checked as boolean)
                        }
                      />
                      <Label htmlFor={`verfuegbar-${fahrzeug.id}`} className="ml-2">
                        Verfügbar
                      </Label>
                    </div>
                    <select
                      value={editingData[fahrzeug.id]?.kategorieId ?? fahrzeug.kategorieId}
                      onChange={(e) =>
                        handleInputChange(fahrzeug.id, "kategorieId", e.target.value)
                      }
                      className="mb-2 block w-full rounded-md border border-input bg-background px-3 py-2 text-base focus:outline-none focus:ring-2 focus:ring-ring"
                    >
                      {kategorien.map((kategorie) => (
                        <option key={kategorie.id} value={kategorie.id}>
                          {kategorie.name}
                        </option>
                      ))}
                    </select>
                    <div className="flex gap-2">
                      <Button size="sm" onClick={() => handleSave(fahrzeug.id)}>
                        <Save className="h-4 w-4 mr-1" /> Speichern
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleCancel(fahrzeug.id)}
                      >
                        <X className="h-4 w-4 mr-1" /> Abbrechen
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => handleDeleteFahrzeug(fahrzeug.id)}
                        className="bg-red-600 hover:bg-red-700 text-white"
                      >
                        <Trash className="h-4 w-4 mr-1" /> Löschen
                      </Button>
                    </div>
                  </>
                ) : (
                  <>
                    <h3 className="font-semibold text-lg">{fahrzeug.modell}</h3>
                    <p className="text-sm text-gray-600">{fahrzeug.marke}</p>
                    <p className="font-semibold mt-2">
                      {fahrzeug.basisPreis.toLocaleString("de-DE")} €
                    </p>
                  </>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      {isEditing && (
        <div className="mt-4">
          <h3 className="text-lg font-semibold">Neues Fahrzeug hinzufügen</h3>
          <div className="space-y-2">
            <div>
              <Label htmlFor="new-marke">Marke</Label>
              <Input
                id="new-marke"
                value={newFahrzeugData.marke}
                onChange={(e) => handleNewFahrzeugChange("marke", e.target.value)}
                placeholder="Marke"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="new-modell">Modell</Label>
              <Input
                id="new-modell"
                value={newFahrzeugData.modell}
                onChange={(e) => handleNewFahrzeugChange("modell", e.target.value)}
                placeholder="Modell"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="new-basisPreis">Basispreis</Label>
              <Input
                id="new-basisPreis"
                value={newFahrzeugData.basisPreis}
                onChange={(e) => handleNewFahrzeugChange("basisPreis", parseFloat(e.target.value))}
                placeholder="Basispreis"
                type="number"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="new-beschreibung">Beschreibung</Label>
              <Input
                id="new-beschreibung"
                value={newFahrzeugData.beschreibung}
                onChange={(e) => handleNewFahrzeugChange("beschreibung", e.target.value)}
                placeholder="Beschreibung"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="new-baujahr">Baujahr</Label>
              <Input
                id="new-baujahr"
                value={newFahrzeugData.baujahr}
                onChange={(e) => handleNewFahrzeugChange("baujahr", parseInt(e.target.value))}
                placeholder="Baujahr"
                type="number"
                className="mt-1"
              />
            </div>
            <div className="flex items-center">
              <Checkbox
                id="new-verfuegbar"
                checked={newFahrzeugData.verfuegbar}
                onCheckedChange={(checked) =>
                  handleNewFahrzeugChange("verfuegbar", checked as boolean)
                }
              />
              <Label htmlFor="new-verfuegbar" className="ml-2">
                Verfügbar
              </Label>
            </div>
            <div>
              <Label htmlFor="new-kategorie">Kategorie</Label>
              <select
                id="new-kategorie"
                value={newFahrzeugData.kategorieId}
                onChange={(e) => handleNewFahrzeugChange("kategorieId", e.target.value)}
                className="mt-1 block w-full rounded-md border border-input bg-background px-3 py-2 text-base focus:outline-none focus:ring-2 focus:ring-ring"
              >
                {kategorien.length === 0 && (
                  <option value="">Keine Kategorien verfügbar</option>
                )}
                {kategorien.map((kategorie) => (
                  <option key={kategorie.id} value={kategorie.id}>
                    {kategorie.name}
                  </option>
                ))}
              </select>
            </div>
          </div>
          <Button onClick={handleAddFahrzeug} className="mt-4">
            Neues Fahrzeug hinzufügen
          </Button>
        </div>
      )}
    </div>
  );
};

export default FahrzeugTab;

// components/konfigurator/FarbeTab.tsx

"use client";

import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { useAppContext } from "@/context/AppContext";
import { Check } from "lucide-react";

const FarbeTab: React.FC = () => {
  const { farben, aktuelleFarbe, setFarbe } = useAppContext();

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold mb-4">Wählen Sie Ihre Lackierung</h2>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {farben.map((farbe) => (
          <Card
            key={farbe.id}
            className={`cursor-pointer hover:border-primary transition-colors ${
              aktuelleFarbe?.id === farbe.id ? "border-primary" : ""
            }`}
            onClick={() => setFarbe(farbe.id)}
          >
            <CardContent className="p-4">
              <div
                className="w-full h-24 rounded-md mb-3"
                style={{ backgroundColor: farbe.farbcode }}
              ></div>
              <h3 className="font-semibold">{farbe.name}</h3>
              <p className="text-sm">{farbe.typ}</p>
              <div className="flex justify-between items-center mt-4">
                <span className="font-semibold">
                  {farbe.preis === 0
                    ? "Serienausstattung"
                    : `+ ${farbe.preis.toLocaleString("de-DE")} €`}
                </span>
                {aktuelleFarbe?.id === farbe.id && (
                  <div className="bg-primary text-white p-1 rounded-full">
                    <Check className="h-4 w-4" />
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default FarbeTab;

// components/konfigurator/FelgenTab.tsx

"use client";

import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { useAppContext } from "@/context/AppContext";
import { Check } from "lucide-react";

const FelgenTab: React.FC = () => {
  const { felgen, aktuelleFelgen, setFelgen } = useAppContext();

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold mb-4">Wählen Sie Ihre Felgen</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {felgen.map((felge) => (
          <Card
            key={felge.id}
            className={`cursor-pointer hover:border-primary transition-colors ${
              aktuelleFelgen?.id === felge.id ? "border-primary" : ""
            }`}
            onClick={() => setFelgen(felge.id)}
          >
            <CardContent className="p-4 flex">
              {felge.bildUrl && (
                <div className="w-24 h-24 mr-4">
                  <img
                    src={felge.bildUrl}
                    alt={felge.name}
                    className="w-full h-full object-cover rounded-md"
                  />
                </div>
              )}
              <div className="flex-1">
                <h3 className="font-semibold">{felge.name}</h3>
                <div className="mt-1 space-y-1 text-sm">
                  <p>
                    <span className="font-medium">Größe:</span> {felge.groesse}{" "}
                    Zoll
                  </p>
                  <p>
                    <span className="font-medium">Design:</span> {felge.design}
                  </p>
                </div>
                <div className="flex justify-between items-center mt-2">
                  <span className="font-semibold">
                    {felge.preis === 0
                      ? "Serienausstattung"
                      : `+ ${felge.preis.toLocaleString("de-DE")} €`}
                  </span>
                  {aktuelleFelgen?.id === felge.id && (
                    <div className="bg-primary text-white p-1 rounded-full">
                      <Check className="h-4 w-4" />
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default FelgenTab;

// components/konfigurator/KonfiguratorTabs.tsx

// components/konfigurator/KonfiguratorTabs.tsx
"use client";

import React from "react";
import { TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { useAppContext } from "@/context/AppContext";
import { useSession } from "next-auth/react";

interface KonfiguratorTabsProps {
  activeTab: string;
  onTabChange: (value: string) => void;
  isTabEnabled: (tab: string) => boolean;
}

// Definition der Tabs mit deutschen Bezeichnungen
const tabs = [
  { value: "fahrzeug", label: "Fahrzeug" },
  { value: "motor", label: "Motor" },
  { value: "farbe", label: "Farbe" },
  { value: "felgen", label: "Felgen" },
  { value: "ausstattung", label: "Ausstattung" },
  { value: "zusammenfassung", label: "Zusammenfassung" },
];

export default function KonfiguratorTabs({
  activeTab,
  onTabChange,
  isTabEnabled,
}: KonfiguratorTabsProps) {
  const { isEditing, toggleEditing } = useAppContext(); // Zugriff auf den Bearbeitungsmodus aus dem Kontext
  const { data: session } = useSession(); // Session-Daten für die Rollenprüfung

  return (
    <div>
      {/* Button für den Bearbeitungsmodus, nur für Admins sichtbar */}
      {session?.user.role === "ADMIN" && (
        <Button
          onClick={toggleEditing} // Umschalten des Bearbeitungsmodus
          className={`mb-4 ${
            isEditing ? "bg-red-600 text-white hover:bg-red-700" : "bg-gray-200 text-black hover:bg-gray-300"
          }`} // Styling: Rot mit weißem Text im Bearbeitungsmodus, Grau mit schwarzem Text sonst
        >
          {isEditing ? "Bearbeitungsmodus deaktivieren" : "Bearbeitungsmodus aktivieren"}
          {/* Text ändert sich je nach Status */}
        </Button>
      )}

      {/* Liste der Tabs */}
      <TabsList className="grid grid-cols-6 gap-2 mb-6">
        {tabs.map((tab) => (
          <TabsTrigger
            key={tab.value}
            value={tab.value}
            onClick={() => onTabChange(tab.value)} // Tab-Wechsel bei Klick
            disabled={!isTabEnabled(tab.value)} // Deaktiviert, wenn Tab nicht verfügbar
            className={`${
              activeTab === tab.value ? "bg-primary text-white" : ""
            } ${!isTabEnabled(tab.value) ? "opacity-50 cursor-not-allowed" : ""}`} // Styling für aktiven/deaktivierten Tab
          >
            {tab.label}
          </TabsTrigger>
        ))}
      </TabsList>
    </div>
  );
}

// components/konfigurator/MotorTab.tsx

"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { useAppContext } from "@/context/AppContext";
import { Check, Save, X } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { useToastContext } from "@/context/ToastContext";

interface MotorTabProps {
  onNext: () => void;
}

const MotorTab: React.FC<MotorTabProps> = ({ onNext }) => {
  const { motoren, aktuellerMotor, setMotor, isEditing } = useAppContext();
  const { showToast } = useToastContext();
  const [editedMotoren, setEditedMotoren] = useState(motoren);
  const [editingData, setEditingData] = useState<
    Record<string, { name?: string; ps?: number; preis?: number }>
  >({});

  // State für neuen Motor
  const [newMotorData, setNewMotorData] = useState({
    name: "Neuer Motor",
    ps: 0,
    preis: 0,
  });

  // Änderungen lokal speichern
  const handleInputChange = (id: string, field: string, value: string | number) => {
    setEditingData((prev) => ({
      ...prev,
      [id]: {
        ...prev[id],
        [field]: value,
      },
    }));
  };

  // Änderungen für neuen Motor speichern
  const handleNewMotorChange = (field: string, value: string | number) => {
    setNewMotorData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  // Speichern der Änderungen
  const handleSave = async (id: string) => {
    const data = editingData[id];
    if (!data || Object.keys(data).length === 0) {
      showToast("Keine Änderungen zum Speichern", "info");
      return;
    }

    try {
      const response = await fetch(`/api/admin/motoren/update`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id, ...data }),
      });
      if (response.ok) {
        const updatedMotor = await response.json();
        setEditedMotoren((prev) =>
          prev.map((m) => (m.id === id ? updatedMotor : m))
        );
        setEditingData((prev) => {
          const newData = { ...prev };
          delete newData[id];
          return newData;
        });
        showToast("Motor erfolgreich gespeichert", "success");
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || "Fehler beim Speichern");
      }
    } catch (error) {
      console.error("Speicherfehler:", error);
      showToast("Fehler beim Speichern des Motors", "error", {
        description: error instanceof Error ? error.message : "Unbekannter Fehler",
      });
    }
  };

  // Änderungen verwerfen
  const handleCancel = (id: string) => {
    setEditingData((prev) => {
      const newData = { ...prev };
      delete newData[id];
      return newData;
    });
  };

  // Neuer Motor hinzufügen
  const handleAddMotor = async () => {
    try {
      const response = await fetch("/api/admin/motoren/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newMotorData),
      });
      if (response.ok) {
        const createdMotor = await response.json();
        setEditedMotoren((prev) => [...prev, createdMotor]);
        showToast("Neuer Motor hinzugefügt", "success");
        setNewMotorData({
          name: "Neuer Motor",
          ps: 0,
          preis: 0,
        });
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || "Fehler beim Hinzufügen");
      }
    } catch (error) {
      console.error("Fehler beim Hinzufügen:", error);
      showToast("Fehler beim Hinzufügen des Motors", "error", {
        description: error instanceof Error ? error.message : "Unbekannter Fehler",
      });
    }
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold mb-4">Wählen Sie Ihren Motor</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {editedMotoren.map((motor) => (
          <Card
            key={motor.id}
            className={`transition-colors ${
              aktuellerMotor?.id === motor.id ? "border-primary" : ""
            } ${!isEditing ? "cursor-pointer hover:border-primary" : ""}`}
            onClick={() => !isEditing && setMotor(motor.id)}
          >
            <CardContent className="p-4">
              {isEditing ? (
                <>
                  <Input
                    value={editingData[motor.id]?.name ?? ""}
                    onChange={(e) => handleInputChange(motor.id, "name", e.target.value)}
                    placeholder={motor.name}
                    className="font-semibold text-lg mb-2"
                  />
                  <Input
                    value={editingData[motor.id]?.ps ?? ""}
                    onChange={(e) =>
                      handleInputChange(motor.id, "ps", parseInt(e.target.value))
                    }
                    placeholder={motor.ps.toString()}
                    type="number"
                    className="mb-2"
                  />
                  <Input
                    value={editingData[motor.id]?.preis ?? ""}
                    onChange={(e) =>
                      handleInputChange(motor.id, "preis", parseFloat(e.target.value))
                    }
                    placeholder={motor.preis.toString()}
                    type="number"
                    className="mb-2"
                  />
                  <div className="flex gap-2">
                    <Button size="sm" onClick={() => handleSave(motor.id)}>
                      <Save className="h-4 w-4 mr-1" /> Speichern
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleCancel(motor.id)}
                    >
                      <X className="h-4 w-4 mr-1" /> Abbrechen
                    </Button>
                  </div>
                </>
              ) : (
                <>
                  <h3 className="font-semibold text-lg">{motor.name}</h3>
                  <p className="text-sm text-gray-600">{motor.ps} PS</p>
                  <p className="font-semibold mt-2">
                    {motor.preis.toLocaleString("de-DE")} €
                  </p>
                  {aktuellerMotor?.id === motor.id && (
                    <div className="absolute top-2 right-2 bg-primary p-1 rounded-full">
                      <Check className="h-4 w-4 text-white" />
                    </div>
                  )}
                </>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
      {isEditing && (
        <div className="mt-4">
          <h3 className="text-lg font-semibold">Neuen Motor hinzufügen</h3>
          <div className="space-y-2">
            <div>
              <Label htmlFor="new-motor-name">Name</Label>
              <Input
                id="new-motor-name"
                value={newMotorData.name}
                onChange={(e) => handleNewMotorChange("name", e.target.value)}
                placeholder="Name"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="new-motor-ps">PS</Label>
              <Input
                id="new-motor-ps"
                value={newMotorData.ps}
                onChange={(e) => handleNewMotorChange("ps", parseInt(e.target.value))}
                placeholder="PS"
                type="number"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="new-motor-preis">Preis</Label>
              <Input
                id="new-motor-preis"
                value={newMotorData.preis}
                onChange={(e) => handleNewMotorChange("preis", parseFloat(e.target.value))}
                placeholder="Preis"
                type="number"
                className="mt-1"
              />
            </div>
          </div>
          <Button onClick={handleAddMotor} className="mt-4">
            Neuen Motor hinzufügen
          </Button>
        </div>
      )}
    </div>
  );
};

export default MotorTab;

// components/konfigurator/NavigationButtons.tsx

"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";

interface NavigationButtonsProps {
  showPrevious: boolean;
  showNext: boolean;
  onPrevious: () => void;
  onNext: () => void;
  nextDisabled?: boolean;
  nextText?: string;
}

const NavigationButtons: React.FC<NavigationButtonsProps> = ({
  showPrevious,
  showNext,
  onPrevious,
  onNext,
  nextDisabled = false,
  nextText = "Weiter",
}) => {
  return (
    <div className="flex justify-between mt-6">
      {showPrevious && (
        <Button
          variant="outline"
          onClick={onPrevious}
          className="flex items-center"
        >
          <ChevronLeft className="mr-1 h-4 w-4" />
          Zurück
        </Button>
      )}
      {showNext && (
        <Button
          onClick={onNext}
          disabled={nextDisabled}
          className="flex items-center ml-auto"
        >
          {nextText}
          <ChevronRight className="ml-1 h-4 w-4" />
        </Button>
      )}
    </div>
  );
};

export default NavigationButtons;

// components/konfigurator/ZusammenfassungTab.tsx

"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { useAppContext } from "@/context/AppContext";

interface ZusammenfassungTabProps {
  onPrevious: () => void;
}

const ZusammenfassungTab: React.FC<ZusammenfassungTabProps> = ({ onPrevious }) => {
  const {
    aktuellesFahrzeug,
    aktuellerMotor,
    aktuelleFarbe,
    aktuelleFelgen,
    aktuelleAusstattungen,
    berechneGesamtpreis,
    speichereKonfiguration,
    resetKonfiguration,
  } = useAppContext();

  const handleSpeichern = () => {
    speichereKonfiguration(); 
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold mb-4">Ihre Konfiguration</h2>
      {aktuellesFahrzeug && (
        <div className="bg-gray-50 p-6 rounded-lg mb-6">
          <div className="flex flex-col md:flex-row gap-6">
            <div className="md:w-1/3">
              <img
                src={aktuellesFahrzeug.bildUrl}
                alt={`${aktuellesFahrzeug.marke} ${aktuellesFahrzeug.modell}`}
                className="w-full h-auto rounded-lg"
              />
              {aktuelleFarbe && (
                <div
                  className="mt-2 p-1 rounded text-center text-sm"
                  style={{
                    backgroundColor: aktuelleFarbe.farbcode,
                    color: aktuelleFarbe.farbcode.startsWith("#f") ? "#000" : "#fff",
                  }}
                >
                  {aktuelleFarbe.name}
                </div>
              )}
            </div>
            <div className="md:w-2/3">
              <h3 className="text-2xl font-bold">
                {aktuellesFahrzeug.marke} {aktuellesFahrzeug.modell}
              </h3>
              <p className="text-gray-600 mb-4">{aktuellesFahrzeug.beschreibung}</p>

              <div className="space-y-4">
                {aktuellerMotor && (
                  <div>
                    <h4 className="font-semibold mb-1">Motor</h4>
                    <p>
                      {aktuellerMotor.name} - {aktuellerMotor.ps} PS
                    </p>
                  </div>
                )}
                {aktuelleFarbe && (
                  <div>
                    <h4 className="font-semibold mb-1">Lackierung</h4>
                    <div className="flex items-center">
                      <div
                        className="w-6 h-6 rounded-full mr-2"
                        style={{ backgroundColor: aktuelleFarbe.farbcode }}
                      ></div>
                      <p>
                        {aktuelleFarbe.name} ({aktuelleFarbe.typ})
                      </p>
                    </div>
                  </div>
                )}
                {aktuelleFelgen && (
                  <div>
                    <h4 className="font-semibold mb-1">Felgen</h4>
                    <p>
                      {aktuelleFelgen.name} ({aktuelleFelgen.groesse} Zoll)
                    </p>
                  </div>
                )}
                {aktuelleAusstattungen && aktuelleAusstattungen.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-1">Zusätzliche Ausstattung</h4>
                    <ul className="list-disc list-inside">
                      {aktuelleAusstattungen.map((ausstattung) => (
                        <li key={ausstattung.id}>{ausstattung.name}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </div>

          <div className="mt-8 pt-6 border-t">
            <div className="flex justify-between items-center">
              <h4 className="text-xl font-bold">Gesamtpreis</h4>
              <span className="text-2xl font-bold">
                {berechneGesamtpreis().toLocaleString("de-DE")} €
              </span>
            </div>
          </div>
        </div>
      )}

      <div className="flex flex-col md:flex-row justify-between items-center mt-6 gap-4 md:gap-0">
        <Button
          variant="outline"
          onClick={onPrevious}
          className="flex items-center w-full md:w-auto"
        >
          Zurück
        </Button>
        <div className="flex flex-col md:flex-row gap-4 md:gap-8 w-full md:w-auto">
          <Button
            variant="outline"
            onClick={resetKonfiguration}
            className="w-full md:w-auto"
          >
            Zurücksetzen
          </Button>
          <Button
            onClick={handleSpeichern}
            className="flex items-center w-full md:w-auto"
          >
            Konfiguration speichern
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ZusammenfassungTab;

// components/ui/accordion.tsx

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


// components/ui/alert-dialog.tsx

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


// components/ui/alert.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


// components/ui/aspect-ratio.tsx

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


// components/ui/avatar.tsx

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


// components/ui/badge.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


// components/ui/breadcrumb.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


// components/ui/button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


// components/ui/calendar.tsx

import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


// components/ui/card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


// components/ui/carousel.tsx

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


// components/ui/chart.tsx

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


// components/ui/checkbox.tsx

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


// components/ui/collapsible.tsx

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


// components/ui/command.tsx

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


// components/ui/context-menu.tsx

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


// components/ui/dialog.tsx

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


// components/ui/drawer.tsx

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


// components/ui/dropdown-menu.tsx

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


// components/ui/form.tsx

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


// components/ui/hover-card.tsx

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


// components/ui/input-otp.tsx

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


// components/ui/input.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


// components/ui/label.tsx

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


// components/ui/menubar.tsx

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


// components/ui/navigation-menu.tsx

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


// components/ui/pagination.tsx

import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


// components/ui/popover.tsx

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


// components/ui/progress.tsx

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


// components/ui/radio-group.tsx

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


// components/ui/resizable.tsx

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


// components/ui/scroll-area.tsx

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


// components/ui/select.tsx

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


// components/ui/separator.tsx

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


// components/ui/sheet.tsx

import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}


// components/ui/sidebar.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


// components/ui/skeleton.tsx

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


// components/ui/slider.tsx

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


// components/ui/sonner.tsx

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


// components/ui/switch.tsx

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


// components/ui/table.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


// components/ui/tabs.tsx

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


// components/ui/textarea.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


// components/ui/toast.tsx

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


// components/ui/toaster.tsx

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


// components/ui/toggle-group.tsx

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


// components/ui/toggle.tsx

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


// components/ui/tooltip.tsx

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


// components/ui/use-toast.ts

import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };


// components/verwaltung/BestellungsList.tsx

// components/BestellungsList.tsx
"use client";

import React, { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import Link from "next/link";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, FileText, Truck, CheckCircle, Clock } from "lucide-react";
import { toast } from "sonner";

type BestellungStatus = "Neu" | "Bestätigt" | "In Produktion" | "Fertig" | "Ausgeliefert";

const statusConfig: Record<BestellungStatus, {
  icon: React.ReactNode;
  color: "default" | "secondary" | "primary" | "destructive" | "outline" | null;
  background: string;
}> = {
  "Neu": { icon: <Clock className="h-4 w-4 mr-1" />, color: "secondary", background: "bg-secondary/20" },
  "Bestätigt": { icon: <FileText className="h-4 w-4 mr-1" />, color: "primary", background: "bg-primary/10" },
  "In Produktion": { icon: <Truck className="h-4 w-4 mr-1" />, color: "primary", background: "bg-primary/20" },
  "Fertig": {
      icon: <CheckCircle className="h-4 w-4 mr-1" />,
      color: "text-emerald-800",
      background: "bg-emerald-200 hover:bg-emerald-200",
    },
    "Ausgeliefert": {
      icon: <CheckCircle className="h-4 w-4 mr-1" />,
      color: "text-emerald-800",
      background: "bg-emerald-100 hover:bg-emerald-100",
    },
};

export default function BestellungsList() {
  const { data: session } = useSession();
  const [searchTerm, setSearchTerm] = useState("");
  const [bestellungen, setBestellungen] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchBestellungen = async () => {
      if (!session) return;

      setIsLoading(true);
      try {
        const response = await fetch("/api/bestellungen", {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });

        if (!response.ok) {
          throw new Error("Fehler beim Laden der Bestellungen");
        }

        const data = await response.json();
        setBestellungen(data.bestellungen || []);
      } catch (error) {
        toast.error("Fehler beim Laden der Bestellungen");
      } finally {
        setIsLoading(false);
      }
    };

    fetchBestellungen();
  }, [session]);

  const filteredBestellungen = bestellungen.filter((bestellung) =>
    bestellung.fahrzeugName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const formatCurrency = (value: number): string => {
    return `${value.toLocaleString("de-DE")} €`;
  };

  if (isLoading) {
    return <div>Lade Bestellungen...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h2 className="text-2xl font-display font-medium">Meine Bestellungen</h2>
        <div className="relative w-full sm:w-64">
          <Input
            placeholder="Bestellung suchen..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full"
          />
        </div>
      </div>

      {filteredBestellungen.length === 0 ? (
        <Card className="border-dashed border-2">
          <CardContent className="pt-6 text-center">
            <div className="flex justify-center mb-4">
              <AlertTriangle className="h-12 w-12 text-muted-foreground" />
            </div>
            <h3 className="text-lg font-medium mb-2">Keine Bestellungen gefunden</h3>
            <p className="text-muted-foreground mb-4">
              Sie haben noch keine Fahrzeuge bestellt oder Ihre Suche ergab keine Treffer.
            </p>
            <Link href="/konfigurator">
              <Button>Fahrzeug konfigurieren</Button>
            </Link>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-4">
          {filteredBestellungen.map((bestellung) => {
            const status = bestellung.status as BestellungStatus;
            const { icon, color, background } = statusConfig[status] || statusConfig["Neu"];

            return (
              <Card key={bestellung.id} className="animate-fade-in">
                <CardHeader>
                  <div className="flex justify-between items-center">
                    <CardTitle>{bestellung.fahrzeugName}</CardTitle>
                    <Badge variant={color || "default"} className={`${background} px-3 py-1`}>
                      {icon}
                      {status}
                    </Badge>
                  </div>
                  <CardDescription>
                    Bestellt am {new Date(bestellung.bestellDatum).toLocaleDateString("de-DE")}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm text-muted-foreground">Gesamtpreis</p>
                      <p className="text-lg font-semibold">{formatCurrency(bestellung.gesamtPreis)}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Voraussichtliche Lieferung</p>
                      <p className="text-lg font-semibold">
                        {bestellung.lieferDatum
                          ? new Date(bestellung.lieferDatum).toLocaleDateString("de-DE")
                          : "Wird berechnet"}
                      </p>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-end">
                  <Link href={`/katalog/${bestellung.konfigurationId}`}>
                    <Button variant="outline" size="sm">
                      <FileText className="h-4 w-4 mr-1" />
                      Details anzeigen
                    </Button>
                  </Link>
                </CardFooter>
              </Card>
            );
          })}
        </div>
      )}
    </div>
  );
}

// components/verwaltung/KonfigurationsList.tsx

// components/KonfigurationsList.tsx
"use client";

import { useState, useEffect } from "react";
import { useAppContext } from "@/context/AppContext";
import { useSession } from "next-auth/react";
import Link from "next/link";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Eye, Play, AlertTriangle, Trash2, CreditCard } from "lucide-react";
import { toast } from "sonner";

export default function KonfigurationsList() {
  const { fahrzeuge } = useAppContext();
  const { data: session } = useSession();
  const [searchTerm, setSearchTerm] = useState("");
  const [konfigurationen, setKonfigurationen] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);


  useEffect(() => {
    const fetchKonfigurationen = async () => {
      if (!session) return;

      setIsLoading(true);
      try {
        const response = await fetch("/api/verwaltung", {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });

        if (!response.ok) {
          throw new Error("Fehler beim Laden der Konfigurationen");
        }

        const data = await response.json();
        setKonfigurationen(data.konfigurationen || []);
      } catch (error) {
        toast.error("Fehler beim Laden der Konfigurationen");
      } finally {
        setIsLoading(false);
      }
    };

    fetchKonfigurationen();
  }, [session]);

  const filteredKonfigurationen = konfigurationen.filter((konfig) => {
    const fahrzeug = fahrzeuge.find((f) => f.id === konfig.fahrzeugId);
    const fahrzeugName = fahrzeug ? `${fahrzeug.marke} ${fahrzeug.modell}` : "";
    return fahrzeugName.toLowerCase().includes(searchTerm.toLowerCase());
  });

  const handleDeleteKonfiguration = async (id: string) => {
    try {
      const response = await fetch(`/api/konfigurator/delete/${id}`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
      });

      if (!response.ok) {
        throw new Error("Fehler beim Löschen der Konfiguration");
      }

      setKonfigurationen(konfigurationen.filter((konfig) => konfig.id !== id));
      toast.success("Konfiguration wurde gelöscht");
    } catch (error) {
      toast.error("Fehler beim Löschen der Konfiguration");
    }
  };

  const handlePayment = async (id: string) => {
    try {
      const response = await fetch("/api/bestellungen/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ konfigurationId: id }),
      });

      if (!response.ok) {
        throw new Error("Fehler beim Erstellen der Bestellung");
      }

      toast.success("Ihre Bestellung wurde aufgenommen und wird bearbeitet!");
      setKonfigurationen((prev) =>
        prev.map((konfig) =>
          konfig.id === id ? { ...konfig, isBestellt: true } : konfig
        )
      );
    } catch (error) {
      toast.error("Fehler beim Erstellen der Bestellung");
    }
  };

  const formatCurrency = (value: number): string => {
    return `${value.toLocaleString("de-DE")} €`;
  };

  if (isLoading) {
    return <div>Lade Konfigurationen...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h2 className="text-2xl font-display font-medium">
          Gespeicherte Konfigurationen
        </h2>
        <div className="relative w-full sm:w-64">
          <Input
            placeholder="Konfiguration suchen..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full"
          />
        </div>
      </div>

      {filteredKonfigurationen.length === 0 ? (
        <Card className="border-dashed border-2">
          <CardContent className="pt-6 text-center">
            <div className="flex justify-center mb-4">
              <AlertTriangle className="h-12 w-12 text-muted-foreground" />
            </div>
            <h3 className="text-lg font-medium mb-2">
              Keine Konfigurationen gefunden
            </h3>
            <p className="text-muted-foreground mb-4">
              Sie haben noch keine Fahrzeugkonfigurationen gespeichert oder Ihre
              Suche ergab keine Treffer.
            </p>
            <Link href="/konfigurator">
              <Button>Neues Fahrzeug konfigurieren</Button>
            </Link>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {filteredKonfigurationen.map((konfig) => {
            const fahrzeug = fahrzeuge.find((f) => f.id === konfig.fahrzeugId);
            const fahrzeugName = fahrzeug
              ? `${fahrzeug.marke} ${fahrzeug.modell}`
              : "Unbekanntes Fahrzeug";

            return (
              <Card key={konfig.id} className="animate-fade-in">
                <CardHeader>
                  <CardTitle className="flex justify-between items-start">
                    <span>{fahrzeugName}</span>
                    <span className="text-primary font-semibold">
                      {formatCurrency(konfig.gesamtpreis)}
                    </span>
                  </CardTitle>
                  <CardDescription>
                    Erstellt am{" "}
                    {new Date(konfig.createdAt).toLocaleDateString("de-DE")}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {fahrzeug && (
                    <div className="aspect-[16/9] overflow-hidden rounded-md bg-muted">
                      <img
                        src={fahrzeug.bildUrl || "/placeholder.svg"}
                        alt={fahrzeug.modell}
                        className="object-cover w-full h-full"
                      />
                    </div>
                  )}
                </CardContent>
                <CardFooter className="flex flex-col gap-3">
                  <div className="flex justify-between w-full">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleDeleteKonfiguration(konfig.id)}
                    >
                      <Trash2 className="h-4 w-4 mr-1" />
                      Löschen
                    </Button>
                    <div className="space-x-2">
                      <Link href={`/katalog/${konfig.fahrzeugId}`}>
                        <Button size="sm" variant="outline">
                          <Eye className="h-4 w-4 mr-1" />
                          Details
                        </Button>
                      </Link>
                      <Link href={`/konfigurator/${konfig.fahrzeugId}`}>
                        <Button
                          size="sm"
                          variant="outline"
                          disabled={konfig.isBestellt}
                        >
                          <Play className="h-4 w-4 mr-1" />
                          Konfigurieren
                        </Button>
                      </Link>
                    </div>
                  </div>
                  <Button
                    className="w-full bg-green-600 hover:bg-green-700"
                    onClick={() => handlePayment(konfig.id)}
                    disabled={konfig.isBestellt}
                  >
                    <CreditCard className="h-4 w-4 mr-2" />
                    {konfig.isBestellt ? "Bestellt" : "Jetzt kaufen"}
                  </Button>
                </CardFooter>
              </Card>
            );
          })}
        </div>
      )}
    </div>
  );
}


// context/AppContext.tsx

"use client";

import React, { createContext, useContext, useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useToastContext } from "@/context/ToastContext"; 

interface Fahrzeug {
  id: string;
  marke: string;
  modell: string;
  basisPreis: number;
  bildUrl: string;
  beschreibung: string;
  verfuegbar: boolean;
  kategorieId: string;
}

interface Motor {
  id: string;
  name: string;
  ps: number;
  preis: number;
}

interface Farbe {
  id: string;
  name: string;
  farbcode: string;
  preis: number;
  typ: string;
}

interface Felgen {
  id: string;
  name: string;
  groesse: number;
  preis: number;
  bildUrl: string;
}

interface Ausstattung {
  id: string;
  name: string;
  preis: number;
  kategorie: string;
}

interface Kategorie {
  id: string;
  name: string;
  fahrzeuge: Fahrzeug[];
}

interface AppContextType {
  fahrzeuge: Fahrzeug[];
  motoren: Motor[];
  farben: Farbe[];
  felgen: Felgen[];
  ausstattungen: Ausstattung[];
  kategorien: Kategorie[];
  aktuellesFahrzeug: Fahrzeug | null;
  aktuellerMotor: Motor | null;
  aktuelleFarbe: Farbe | null;
  aktuelleFelgen: Felgen | null;
  aktuelleAusstattungen: Ausstattung[];
  isLoading: boolean;
  isEditing: boolean;
  toggleEditing: () => void;
  setFahrzeug: (id: string) => void;
  setMotor: (id: string) => void;
  setFarbe: (id: string) => void;
  setFelgen: (id: string) => void;
  toggleAusstattung: (id: string) => void;
  berechneGesamtpreis: () => number;
  speichereKonfiguration: () => void;
  resetKonfiguration: () => void;
  validateStep: (step: string) => boolean;
}

const AppContext = createContext<AppContextType | undefined>(undefined);

export const AppProvider = ({ children }: { children: React.ReactNode }) => {
  const [fahrzeuge, setFahrzeuge] = useState<Fahrzeug[]>([]);
  const [motoren, setMotoren] = useState<Motor[]>([]);
  const [farben, setFarben] = useState<Farbe[]>([]);
  const [felgen, setFelgen] = useState<Felgen[]>([]);
  const [ausstattungen, setAusstattungen] = useState<Ausstattung[]>([]);
  const [kategorien, setKategorien] = useState<Kategorie[]>([]);
  const [aktuellesFahrzeug, setAktuellesFahrzeug] = useState<Fahrzeug | null>(null);
  const [aktuellerMotor, setAktuellerMotor] = useState<Motor | null>(null);
  const [aktuelleFarbe, setAktuelleFarbe] = useState<Farbe | null>(null);
  const [aktuelleFelgen, setAktuelleFelgen] = useState<Felgen | null>(null);
  const [aktuelleAusstattungen, setAktuelleAusstattungen] = useState<Ausstattung[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const { data: session } = useSession();
  const router = useRouter();
  const { showToast } = useToastContext();

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const response = await fetch("/api/konfigurator/data");
        const data = await response.json();
        setFahrzeuge(data.fahrzeuge);
        setMotoren(data.motoren);
        setFarben(data.farben);
        setFelgen(data.felgen);
        setAusstattungen(data.ausstattungen);
        setKategorien(data.kategorien);
      } catch (error) {
        showToast(
          "Fehler beim Laden der Daten",
          "error",
          {
            description: error instanceof Error ? error.message : "Unbekannter Fehler",
          }
        );
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, [showToast]);

  
  useEffect(() => {
    if (aktuellesFahrzeug) {
      showToast(`${aktuellesFahrzeug.marke} ${aktuellesFahrzeug.modell} ausgewählt`, "success");
    }
  }, [aktuellesFahrzeug, showToast]);

  useEffect(() => {
    if (aktuellerMotor) {
      showToast(`Motor ${aktuellerMotor.name} ausgewählt`, "success");
    }
  }, [aktuellerMotor, showToast]);

  useEffect(() => {
    if (aktuelleFarbe) {
      showToast(`Farbe ${aktuelleFarbe.name} ausgewählt`, "success");
    }
  }, [aktuelleFarbe, showToast]);

  useEffect(() => {
    if (aktuelleFelgen) {
      showToast(`Felgen ${aktuelleFelgen.name} ausgewählt`, "success");
    }
  }, [aktuelleFelgen, showToast]);

  useEffect(() => {
    if (aktuelleAusstattungen.length > 0) {
      const lastAusstattung = aktuelleAusstattungen[aktuelleAusstattungen.length - 1];
      //showToast(`${lastAusstattung.name} ausgewählt`, "success");
    } else if (aktuelleAusstattungen.length === 0 && ausstattungen.length > 0) {
     // showToast("Alle Ausstattungen entfernt", "info");
    }
  }, [aktuelleAusstattungen, ausstattungen, showToast]);

  const handleSetFahrzeug = (id: string) => {
    const fahrzeug = fahrzeuge.find((f) => f.id === id) || null;
    setAktuellesFahrzeug(fahrzeug);
  };

  const handleSetMotor = (id: string) => {
    const motor = motoren.find((m) => m.id === id) || null;
    setAktuellerMotor(motor);
  };

  const handleSetFarbe = (id: string) => {
    const farbe = farben.find((f) => f.id === id) || null;
    setAktuelleFarbe(farbe);
  };

  const handleSetFelgen = (id: string) => {
    const felge = felgen.find((f) => f.id === id) || null;
    setAktuelleFelgen(felge);
  };

  const toggleEditing = () => {
    if (session?.user.role === "ADMIN") {
      setIsEditing((prev) => !prev);
    } else {
      showToast("Nur Administratoren können bearbeiten", "error");
    }
  };

  const toggleAusstattung = (id: string) => {
    const ausstattung = ausstattungen.find((a) => a.id === id);
    if (!ausstattung) return;
    setAktuelleAusstattungen((prev) =>
      prev.some((a) => a.id === id)
        ? prev.filter((a) => a.id !== id)
        : [...prev, ausstattung]
    );
  };

  const berechneGesamtpreis = () => {
    const basisPreis = aktuellesFahrzeug?.basisPreis || 0;
    const motorPreis = aktuellerMotor?.preis || 0;
    const farbePreis = aktuelleFarbe?.preis || 0;
    const felgenPreis = aktuelleFelgen?.preis || 0;
    const ausstattungPreis = aktuelleAusstattungen.reduce((sum, a) => sum + a.preis, 0);
    return basisPreis + motorPreis + farbePreis + felgenPreis + ausstattungPreis;
  };

  const speichereKonfiguration = async () => {
    if (!session) {
      showToast("Anmeldung erforderlich", "error", {
        description: "Bitte melden Sie sich an, um die Konfiguration zu speichern",
        action: {
          label: "Anmelden",
          onClick: () => router.push("/login"),
        },
      });
      router.push("/login");
      return;
    }
  
    if (!aktuellesFahrzeug || !aktuellerMotor || !aktuelleFarbe || !aktuelleFelgen) {
      showToast("Bitte schließen Sie alle Schritte ab", "error", {
        description: `Fehlende Auswahl: ${
          !aktuellesFahrzeug ? "Fahrzeug" : ""
        } ${!aktuellerMotor ? "Motor" : ""} ${!aktuelleFarbe ? "Farbe" : ""} ${
          !aktuelleFelgen ? "Felgen" : ""
        }`.trim(),
      });
      return;
    }
  
    try {
      const response = await fetch("/api/konfigurator/save", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          fahrzeugId: aktuellesFahrzeug?.id,
          motorId: aktuellerMotor?.id,
          farbeId: aktuelleFarbe?.id,
          felgenId: aktuelleFelgen?.id,
          ausstattungIds: aktuelleAusstattungen.map((a) => a.id),
          gesamtpreis: berechneGesamtpreis(),
        }),
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Fehler beim Speichern");
      }
  
      showToast("Konfiguration gespeichert!", "success");
      resetKonfiguration();
      router.push("/verwaltung");
    } catch (error) {
      showToast("Fehler beim Speichern der Konfiguration", "error", {
        description: error instanceof Error ? error.message : "Unbekannter Fehler",
      });
    }
  };

  const resetKonfiguration = () => {
    setAktuellesFahrzeug(null);
    setAktuellerMotor(null);
    setAktuelleFarbe(null);
    setAktuelleFelgen(null);
    setAktuelleAusstattungen([]);
  };

  const validateStep = (step: string) => {
    if (isEditing) return true;
    switch (step) {
      case "fahrzeug":
        return true;
      case "motor":
        return !!aktuellesFahrzeug;
      case "farbe":
        return !!(aktuellesFahrzeug && aktuellerMotor);
      case "felgen":
        return !!(aktuellesFahrzeug && aktuellerMotor && aktuelleFarbe);
      case "ausstattung":
      case "zusammenfassung":
        return !!(aktuellesFahrzeug && aktuellerMotor && aktuelleFarbe && aktuelleFelgen);
      default:
        return false;
    }
  };

  const value = {
    fahrzeuge,
    motoren,
    farben,
    felgen,
    ausstattungen,
    kategorien,
    aktuellesFahrzeug,
    aktuellerMotor,
    aktuelleFarbe,
    aktuelleFelgen,
    aktuelleAusstattungen,
    isLoading,
    setFahrzeug: handleSetFahrzeug,
    setMotor: handleSetMotor,
    setFarbe: handleSetFarbe,
    setFelgen: handleSetFelgen,
    toggleAusstattung,
    berechneGesamtpreis,
    speichereKonfiguration,
    resetKonfiguration,
    validateStep,
    isEditing,
    toggleEditing,
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
};

export const useAppContext = () => {
  const context = useContext(AppContext);
  if (!context) throw new Error("useAppContext must be used within AppProvider");
  return context;
};

// context/ToastContext.tsx

"use client";

import React, { createContext, useContext } from "react";
import { toast } from "sonner";

interface ToastOptions {
  description?: string;
  duration?: number;
  action?: {
    label: string;
    onClick: () => void;
  };
}

interface ToastContextType {
  showToast: (message: string, type: "success" | "error" | "info", options?: ToastOptions) => void;
  dismissToast: () => void;
}

const ToastContext = createContext<ToastContextType | undefined>(undefined);

export const ToastProvider = ({ children }: { children: React.ReactNode }) => {
  const showToast = (
    message: string,
    type: "success" | "error" | "info",
    options: ToastOptions = {}
  ) => {
    const { description, duration = 2000, action } = options;

    toast[type](message, {
      description,
      duration,
      position: "bottom-right",
      action: action
        ? {
            label: action.label,
            onClick: action.onClick,
          }
        : undefined,
    });
  };

  const dismissToast = () => {
    toast.dismiss();
  };

  return (
    <ToastContext.Provider value={{ showToast, dismissToast }}>
      {children}
    </ToastContext.Provider>
  );
};

export const useToastContext = () => {
  const context = useContext(ToastContext);
  if (!context) {
    throw new Error("useToastContext must be used within a ToastProvider");
  }
  return context;
};

// context/utils.ts

import { Konfiguration } from "@/types/models";

export const initialKonfiguration: Konfiguration = {
  id: "",
  fahrzeugId: "",
  motorId: "",
  farbeId: "",
  felgenId: "",
  ausstattungIds: [],
  gesamtPreis: 0,
  erstelltAm: new Date(),
};

export const validateConfigurationStep = (
  step: string,
  isFahrzeugSelected: boolean,
  isMotorSelected: boolean,
  isFarbeSelected: boolean,
  isFelgenSelected: boolean
): boolean => {
  switch (step) {
    case "fahrzeug":
      return true;
    case "motor":
      return isFahrzeugSelected;
    case "farbe":
      return isFahrzeugSelected && isMotorSelected;
    case "felgen":
      return isFahrzeugSelected && isMotorSelected && isFarbeSelected;
    case "ausstattung":
      return isFahrzeugSelected && isMotorSelected && isFarbeSelected && isFelgenSelected;
    case "zusammenfassung":
      return isFahrzeugSelected && isMotorSelected && isFarbeSelected && isFelgenSelected;
    default:
      return false;
  }
};

// hooks/use-mobile.tsx

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


// hooks/use-toast.ts

// WARNING: This file is not currently used in the project. Consider removing if no longer needed.

"use client";

import * as React from "react";
import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const ACTION_TYPES = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

let count = 0;
function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type Action =
  | {
      type: typeof ACTION_TYPES.ADD_TOAST;
      toast: ToasterToast;
    }
  | {
      type: typeof ACTION_TYPES.UPDATE_TOAST;
      toast: Partial<ToasterToast>;
    }
  | {
      type: typeof ACTION_TYPES.DISMISS_TOAST;
      toastId?: ToasterToast["id"];
    }
  | {
      type: typeof ACTION_TYPES.REMOVE_TOAST;
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }
  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);
  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };
    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };
    case "DISMISS_TOAST": {
      const { toastId } = action;
      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];
let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();
  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });
  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });
  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);
  
  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, []);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };

// lib/auth.ts

import { PrismaAdapter } from "@auth/prisma-adapter";
import { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { prisma } from "@/lib/prisma";
import * as bcrypt from "bcrypt";

export const authOptions: NextAuthOptions = {
  adapter: PrismaAdapter(prisma),
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Passwort", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null;
        }

        const normalizedEmail = credentials.email.toLowerCase();

        const user = await prisma.user.findUnique({
          where: {
            email: normalizedEmail,
          },
        });

        if (!user) {
          return null;
        }

        const passwordMatch = await bcrypt.compare(credentials.password, user.password);

        if (!passwordMatch) {
          return null;
        }

        return {
          id: user.id,
          email: user.email,
          firstName: user.firstName,
          lastName: user.lastName,
          role: user.role,
        };
      },
    }),
  ],
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, 
    updateAge: 24 * 60 * 60, 
  },
  jwt: {
    maxAge: 30 * 24 * 60 * 60, 
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.role = user.role;
        token.firstName = user.firstName;
        token.lastName = user.lastName;
      }
      return token;
    },
    async session({ session, token }) {
      if (token && session.user) {
        session.user.id = token.id as string;
        session.user.role = token.role as string;
        session.user.firstName = token.firstName as string;
        session.user.lastName = token.lastName as string;
      }
      return session;
    },
  },
  pages: {
    signIn: "/login",
    error: "/login",
  },
  secret: process.env.NEXTAUTH_SECRET,
  debug: process.env.NODE_ENV === "development",
};

export default authOptions;

// lib/prisma.ts

import { PrismaClient } from '@prisma/client';

const prismaClientSingleton = () => {
  return new PrismaClient();
};

declare global {
  var prismaGlobal: undefined | ReturnType<typeof prismaClientSingleton>;
}

export const prisma = globalThis.prismaGlobal ?? prismaClientSingleton();

if (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma;


// lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password        String // hashed
  role            String // "ADMIN", "USER"
  firstName       String 
  lastName        String 
  street          String 
  houseNumber     String 
  postalCode      String 
  city            String 
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  regionId        String?
  accounts        Account[]
  sessions        Session[]
  region          Region?         @relation(fields: [regionId], references: [id])
  konfigurationen Konfiguration[]
  bestellungen    Bestellung[]

  @@index([email]) // Index für schnelle E-Mail-Suche
}

model Region {
  id           String @id @default(uuid())
  name         String
  beschreibung String
  kunden       User[]
}

model FahrzeugKategorie {
  id           String     @id @default(uuid())
  name         String
  beschreibung String
  fahrzeuge    Fahrzeug[]
}

model Fahrzeug {
  id              String            @id @default(uuid())
  marke           String
  modell          String
  baujahr         Int
  basisPreis      Float
  bildUrl         String
  beschreibung    String
  verfuegbar      Boolean
  kategorieId     String
  kategorie       FahrzeugKategorie @relation(fields: [kategorieId], references: [id])
  konfigurationen Konfiguration[] 
}

model Motor {
  id              String          @id @default(uuid())
  name            String
  ps              Int
  hubraum         Int
  kraftstoff      String
  verbrauch       Float
  co2Ausstoss     Float
  preis           Float
  konfigurationen Konfiguration[] 
}

model Farbe {
  id              String          @id @default(uuid())
  name            String
  farbcode        String
  preis           Float
  typ             String
  konfigurationen Konfiguration[] 
}

model Felgen {
  id              String          @id @default(uuid())
  name            String
  groesse         Int
  design          String
  preis           Float
  bildUrl         String
  konfigurationen Konfiguration[] 
}

model FahrzeugAusstattung {
  id              String                     @id @default(uuid())
  name            String
  beschreibung    String
  preis           Float
  kategorie       String
  konfigurationen KonfigurationAusstattung[] 
}

model Bestellung {
  id              String        @id @default(uuid())
  userId          String
  konfigurationId String        @unique
  status          String        @default("Neu")
  bestellDatum    DateTime      @default(now())
  lieferDatum     DateTime?
  user            User          @relation(fields: [userId], references: [id])
  konfiguration   Konfiguration @relation(fields: [konfigurationId], references: [id])
}

model Konfiguration {
  id            String                     @id @default(uuid())
  userId        String
  fahrzeugId    String
  motorId       String?
  farbeId       String?
  felgenId      String?
  gesamtpreis   Float
  isBestellt    Boolean                    @default(false)
  createdAt     DateTime                   @default(now())
  user          User                       @relation(fields: [userId], references: [id])
  fahrzeug      Fahrzeug                   @relation(fields: [fahrzeugId], references: [id])
  motor         Motor?                     @relation(fields: [motorId], references: [id])
  farbe         Farbe?                     @relation(fields: [farbeId], references: [id])
  felgen        Felgen?                    @relation(fields: [felgenId], references: [id])
  ausstattungen KonfigurationAusstattung[]
  bestellung    Bestellung?
}

// Verknüpfungstabelle für Many-to-many zwischen Konfiguration und FahrzeugAusstattung
model KonfigurationAusstattung {
  konfigurationId String
  ausstattungId   String
  konfiguration   Konfiguration       @relation(fields: [konfigurationId], references: [id])
  ausstattung     FahrzeugAusstattung @relation(fields: [ausstattungId], references: [id])

  @@id([konfigurationId, ausstattungId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// prisma/migrations/migration_lock.toml

# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"

// prisma/migrations/20250309212839_make_address_fields_required/migration.sql

-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "password" TEXT NOT NULL,
    "role" TEXT NOT NULL,
    "firstName" TEXT NOT NULL,
    "lastName" TEXT NOT NULL,
    "street" TEXT NOT NULL,
    "houseNumber" TEXT NOT NULL,
    "postalCode" TEXT NOT NULL,
    "city" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "regionId" TEXT,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Region" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "beschreibung" TEXT NOT NULL,

    CONSTRAINT "Region_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "FahrzeugKategorie" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "beschreibung" TEXT NOT NULL,

    CONSTRAINT "FahrzeugKategorie_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Fahrzeug" (
    "id" TEXT NOT NULL,
    "marke" TEXT NOT NULL,
    "modell" TEXT NOT NULL,
    "baujahr" INTEGER NOT NULL,
    "basisPreis" DOUBLE PRECISION NOT NULL,
    "bildUrl" TEXT NOT NULL,
    "beschreibung" TEXT NOT NULL,
    "verfuegbar" BOOLEAN NOT NULL,
    "kategorieId" TEXT NOT NULL,

    CONSTRAINT "Fahrzeug_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Motor" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "ps" INTEGER NOT NULL,
    "hubraum" INTEGER NOT NULL,
    "kraftstoff" TEXT NOT NULL,
    "verbrauch" DOUBLE PRECISION NOT NULL,
    "co2Ausstoss" DOUBLE PRECISION NOT NULL,
    "preis" DOUBLE PRECISION NOT NULL,

    CONSTRAINT "Motor_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Farbe" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "farbcode" TEXT NOT NULL,
    "preis" DOUBLE PRECISION NOT NULL,
    "typ" TEXT NOT NULL,

    CONSTRAINT "Farbe_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Felgen" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "groesse" INTEGER NOT NULL,
    "design" TEXT NOT NULL,
    "preis" DOUBLE PRECISION NOT NULL,
    "bildUrl" TEXT NOT NULL,

    CONSTRAINT "Felgen_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "FahrzeugAusstattung" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "beschreibung" TEXT NOT NULL,
    "preis" DOUBLE PRECISION NOT NULL,
    "kategorie" TEXT NOT NULL,

    CONSTRAINT "FahrzeugAusstattung_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Bestellung" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "konfigurationId" TEXT NOT NULL,
    "status" TEXT NOT NULL DEFAULT 'Neu',
    "bestellDatum" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "lieferDatum" TIMESTAMP(3),

    CONSTRAINT "Bestellung_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Konfiguration" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "fahrzeugId" TEXT NOT NULL,
    "motorId" TEXT,
    "farbeId" TEXT,
    "felgenId" TEXT,
    "gesamtpreis" DOUBLE PRECISION NOT NULL,
    "isBestellt" BOOLEAN NOT NULL DEFAULT false,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "Konfiguration_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "KonfigurationAusstattung" (
    "konfigurationId" TEXT NOT NULL,
    "ausstattungId" TEXT NOT NULL,

    CONSTRAINT "KonfigurationAusstattung_pkey" PRIMARY KEY ("konfigurationId","ausstattungId")
);

-- CreateTable
CREATE TABLE "Account" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "provider" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "refresh_token" TEXT,
    "access_token" TEXT,
    "expires_at" INTEGER,
    "token_type" TEXT,
    "scope" TEXT,
    "id_token" TEXT,
    "session_state" TEXT,

    CONSTRAINT "Account_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Session" (
    "id" TEXT NOT NULL,
    "sessionToken" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Session_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "VerificationToken" (
    "identifier" TEXT NOT NULL,
    "token" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- CreateIndex
CREATE INDEX "User_email_idx" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "Bestellung_konfigurationId_key" ON "Bestellung"("konfigurationId");

-- CreateIndex
CREATE UNIQUE INDEX "Account_provider_providerAccountId_key" ON "Account"("provider", "providerAccountId");

-- CreateIndex
CREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");

-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_token_key" ON "VerificationToken"("token");

-- CreateIndex
CREATE UNIQUE INDEX "VerificationToken_identifier_token_key" ON "VerificationToken"("identifier", "token");

-- AddForeignKey
ALTER TABLE "User" ADD CONSTRAINT "User_regionId_fkey" FOREIGN KEY ("regionId") REFERENCES "Region"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Fahrzeug" ADD CONSTRAINT "Fahrzeug_kategorieId_fkey" FOREIGN KEY ("kategorieId") REFERENCES "FahrzeugKategorie"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Bestellung" ADD CONSTRAINT "Bestellung_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Bestellung" ADD CONSTRAINT "Bestellung_konfigurationId_fkey" FOREIGN KEY ("konfigurationId") REFERENCES "Konfiguration"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Konfiguration" ADD CONSTRAINT "Konfiguration_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Konfiguration" ADD CONSTRAINT "Konfiguration_fahrzeugId_fkey" FOREIGN KEY ("fahrzeugId") REFERENCES "Fahrzeug"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Konfiguration" ADD CONSTRAINT "Konfiguration_motorId_fkey" FOREIGN KEY ("motorId") REFERENCES "Motor"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Konfiguration" ADD CONSTRAINT "Konfiguration_farbeId_fkey" FOREIGN KEY ("farbeId") REFERENCES "Farbe"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Konfiguration" ADD CONSTRAINT "Konfiguration_felgenId_fkey" FOREIGN KEY ("felgenId") REFERENCES "Felgen"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "KonfigurationAusstattung" ADD CONSTRAINT "KonfigurationAusstattung_konfigurationId_fkey" FOREIGN KEY ("konfigurationId") REFERENCES "Konfiguration"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "KonfigurationAusstattung" ADD CONSTRAINT "KonfigurationAusstattung_ausstattungId_fkey" FOREIGN KEY ("ausstattungId") REFERENCES "FahrzeugAusstattung"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Account" ADD CONSTRAINT "Account_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Session" ADD CONSTRAINT "Session_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;


// public/file.svg

<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

// public/globe.svg

<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

// public/next.svg

<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

// public/vercel.svg

<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

// public/window.svg

<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

// public/uploads/1741641620498-mercedes-benz-c-class-w206-06-2022.jpg

// public/uploads/1741641620498-mercedes-benz-c-class-w206-06-2022.jpg [Ошибка чтения: 'utf-8' codec can't decode byte 0x98 in position 31: invalid start byte]

// public/uploads/1741645584805-898.jpg

// public/uploads/1741645584805-898.jpg [Ошибка чтения: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

// public/uploads/1741648120538-k7m-2021-new.png

// public/uploads/1741648120538-k7m-2021-new.png [Ошибка чтения: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

// public/uploads/1741680141457-k7m-2021-new.png

// public/uploads/1741680141457-k7m-2021-new.png [Ошибка чтения: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

// public/uploads/1741680474282-mercedes-benz-c-class-w206-06-2022.jpg

// public/uploads/1741680474282-mercedes-benz-c-class-w206-06-2022.jpg [Ошибка чтения: 'utf-8' codec can't decode byte 0x98 in position 31: invalid start byte]

// public/uploads/1741701455474-k7m-2021-new.png

// public/uploads/1741701455474-k7m-2021-new.png [Ошибка чтения: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

// public/uploads/1741702684056-Leonardo_Phoenix_10_A_highly_detailed_and_photorealistic_image_3.jpg

// public/uploads/1741702684056-Leonardo_Phoenix_10_A_highly_detailed_and_photorealistic_image_3.jpg [Ошибка чтения: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

// public/uploads/1741702694533-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_0.jpg

// public/uploads/1741702694533-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_0.jpg [Ошибка чтения: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

// public/uploads/1741702715336-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_2 (1).jpg

// public/uploads/1741702715336-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_2 (1).jpg [Ошибка чтения: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

// public/uploads/1741702731875-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_2.jpg

// public/uploads/1741702731875-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_2.jpg [Ошибка чтения: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

// public/uploads/1741702747903-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_0 (1).jpg

// public/uploads/1741702747903-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_0 (1).jpg [Ошибка чтения: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

// public/uploads/1741703193955-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_0 (2).jpg

// public/uploads/1741703193955-Leonardo_Phoenix_10_A_highly_realistic_and_detailed_image_of_a_0 (2).jpg [Ошибка чтения: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

// public/uploads/1741703230004-k7m-2021-new.png

// public/uploads/1741703230004-k7m-2021-new.png [Ошибка чтения: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

// types/models.ts


// Modelle für unsere Fahrzeug-Konfigurationen

export interface Fahrzeug {
  id: string;
  marke: string;
  modell: string;
  baujahr: number;
  basisPreis: number;
  bildUrl: string;
  beschreibung: string;
  verfuegbar: boolean;
}

export interface FahrzeugKategorie {
  id: string;
  name: string;
  beschreibung: string;
  fahrzeuge: Fahrzeug[];
}

export interface FahrzeugAusstattung {
  id: string;
  name: string;
  beschreibung: string;
  preis: number;
  kategorie: string; // z.B. "Innenausstattung", "Motor", "Fahrwerk"
  bildUrl?: string;
}

export interface Motor {
  id: string;
  name: string;
  ps: number;
  hubraum: number; // in ccm
  kraftstoff: "Benzin" | "Diesel" | "Elektro" | "Hybrid";
  verbrauch: number; // l/100km oder kWh/100km
  co2Ausstoss: number; // g/km
  preis: number;
}

export interface Farbe {
  id: string;
  name: string;
  farbcode: string; // hex-code
  preis: number;
  typ: "Metallic" | "Uni" | "Perleffekt" | "Matt";
  bildUrl?: string;
}

export interface Felgen {
  id: string;
  name: string;
  groesse: number; // in Zoll
  design: string;
  preis: number;
  bildUrl?: string;
}

export interface Konfiguration {
  id: string;
  fahrzeugId: string;
  motorId: string;
  farbeId: string;
  felgenId: string;
  ausstattungIds: string[];
  gesamtPreis: number;
  erstelltAm: Date;
  kundeId?: string;
}

export interface Kunde {
  id: string;
  name: string;
  vorname: string;
  email: string;
  telefon?: string;
  adresse?: Adresse;
  region: string;
  konfigurationen: Konfiguration[];
}

export interface Adresse {
  strasse: string;
  hausnummer: string;
  plz: string;
  ort: string;
  land: string;
}

export interface Bestellung {
  id: string;
  konfigurationId: string;
  kundeId: string;
  status: "Neu" | "Bestätigt" | "In Produktion" | "Fertig" | "Ausgeliefert";
  bestellDatum: Date;
  lieferDatum?: Date;
}

export interface Region {
  id: string;
  name: string;
  beschreibung?: string;
  kunden: Kunde[];
}

export interface Benutzer {
  id: string;
  benutzername: string;
  name: string;
  email: string;
  rolle: "Admin" | "Verkäufer" | "Kunde";
  regionId?: string;
}


// types/next-auth.d.ts

import { DefaultSession, DefaultUser } from "next-auth";

interface CustomUser extends DefaultUser {
  id: string;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
  role?: string;
}


declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      firstName?: string | null | undefined;
      lastName?: string | null | undefined;
      role?: string;
      email?: string | null | undefined;
      name?: string | null | undefined;
      image?: string | null | undefined;
    };
  }

  interface User extends CustomUser {}
}


declare module "next-auth/jwt" {
  interface JWT {
    id: string;
    firstName?: string | null | undefined;
    lastName?: string | null | undefined;
    role?: string;
    email?: string | null | undefined;
  }
}

